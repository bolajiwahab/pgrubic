{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pgrubic","text":"<p>A PostgreSQL linter and formatter for schema migrations and design best practices.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Over 100+ rules</li> <li>Automatic violation correction (e.g., automatically add <code>concurrently</code> to index create statements)</li> <li>River style code formatting for DML statements</li> <li>Almost identical stying with pg_dump for DDL statements</li> <li>Python 3.12+ compatibility</li> <li>Automatic caching to avoid reformatting unchanged files</li> <li>Violations suppression, statement level, and file level</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>pgrubic is built upon the shoulders of:</p> <ul> <li>pglast - Python bindings to libpg_query</li> <li>libpg_query - PostgreSQL parser outside of the server environment</li> </ul>"},{"location":"cli/","title":"Command line interface","text":""},{"location":"cli/#pgrubic","title":"pgrubic","text":"<p>PostgreSQL linter and formatter for schema migrations and design   best practices.</p>"},{"location":"cli/#options","title":"Options","text":""},{"location":"cli/#-version","title":"--version","text":"<p>\u00a0\u00a0\u00a0\u00a0\u00a0Show the version and exit.</p> <p>Examples:</p> <pre><code> pgrubic lint\n\n pgrubic lint .\n\n pgrubic lint *.sql\n\n pgrubic lint example.sql\n\n pgrubic format file.sql\n\n pgrubic format migrations/\n</code></pre>"},{"location":"cli/#lint","title":"lint","text":"<p>\u00a0\u00a0\u00a0\u00a0\u00a0Lint SQL files.</p>"},{"location":"cli/#options_1","title":"Options","text":""},{"location":"cli/#-fix","title":"--fix","text":"<p>\u00a0\u00a0\u00a0\u00a0\u00a0Fix lint violations automatically.</p>"},{"location":"cli/#-ignore-noqa","title":"--ignore-noqa","text":"<p>\u00a0\u00a0\u00a0\u00a0\u00a0Whether to ignore noqa directives.</p>"},{"location":"cli/#-add-file-level-general-noqa","title":"--add-file-level-general-noqa","text":"<p>\u00a0\u00a0\u00a0\u00a0\u00a0Whether to add file-level noqa directives.</p>"},{"location":"cli/#-generate-lint-report","title":"--generate-lint-report","text":"<p>\u00a0\u00a0\u00a0\u00a0\u00a0Whether to generate a lint report.</p>"},{"location":"cli/#-verbose","title":"--verbose","text":"<p>\u00a0\u00a0\u00a0\u00a0\u00a0Enable verbose logging.</p>"},{"location":"cli/#-workers","title":"--workers","text":"<p>\u00a0\u00a0\u00a0\u00a0\u00a0Number of workers to use.</p>"},{"location":"cli/#format","title":"format","text":"<p>\u00a0\u00a0\u00a0\u00a0\u00a0Format SQL files.</p>"},{"location":"cli/#options_2","title":"Options","text":""},{"location":"cli/#-check","title":"--check","text":"<p>\u00a0\u00a0\u00a0\u00a0\u00a0Check if any files would have been modified.</p>"},{"location":"cli/#-diff","title":"--diff","text":"<p>\u00a0\u00a0\u00a0\u00a0\u00a0Report the difference between the current file and how the formatted file would look like.</p>"},{"location":"cli/#-no-cache","title":"--no-cache","text":"<p>\u00a0\u00a0\u00a0\u00a0\u00a0Whether to read the cache.</p>"},{"location":"cli/#-verbose_1","title":"--verbose","text":"<p>\u00a0\u00a0\u00a0\u00a0\u00a0Enable verbose logging.</p>"},{"location":"cli/#-workers_1","title":"--workers","text":"<p>\u00a0\u00a0\u00a0\u00a0\u00a0Number of workers to use.</p>"},{"location":"cli/#exit-codes","title":"Exit codes","text":"<p>When using pgrubic as a command line tool, it returns exit-code which can be useful in CI pipelines.</p>"},{"location":"cli/#lint_1","title":"lint","text":"Code Description 0 No violations found or all violations were fixed automatically 1 Violations found 2 Error occurred during linting"},{"location":"cli/#format_1","title":"format","text":"Code Description 0 Formatting was successful, even if no changes were made 2 Error occurred during formatting"},{"location":"cli/#-check_1","title":"--check","text":"Code Description 0 No changes would be made 1 Changes would be made 2 Error occurred during formatting"},{"location":"cli/#-diff_1","title":"--diff","text":"Code Description 0 No changes would be made 1 Changes would be made 2 Error occurred during formatting"},{"location":"configuration/","title":"Configuring pgrubic","text":"<p>pgrubic is configured via the <code>pgrubic.toml</code> configuration file in either the current directory, up to the root directory or the path set by the <code>PGRUBIC_CONFIG_PATH</code> environment variable.</p>"},{"location":"configuration/#discovery","title":"Discovery","text":"<p>pgrubic recursively searches for the configuration file by starting in the current directory and moving up one level at a time until it either finds the file or reaches the root directory.</p> <p>When <code>PGRUBIC_CONFIG_PATH</code> environment variable is set, pgrubic will first search for the configuration file at the path set by <code>PGRUBIC_CONFIG_PATH</code> and if it does not find the file, it will search for the configuration file in the same way as described above.</p> <p>If after searching for the configuration file, the configuration file is not found, pgrubic will then fall back to the default configuration.</p>"},{"location":"configuration/#sections","title":"Sections","text":"<p>There are three sections in the configuration file: <code>global</code>, <code>lint</code> and <code>format</code>.</p> <p>The <code>global</code> section is used to configure global settings for pgrubic. Its section is the top level section in the configuration file hence it is not named.</p> <p>The <code>lint</code> section is used to configure lint-specific settings for pgrubic.</p> <p>The <code>format</code> section is used to configure format-specific settings for pgrubic.</p>"},{"location":"configuration/#default-configuration","title":"Default Configuration","text":"<pre><code># Path to the cache directory\ncache-dir = \".pgrubic_cache\"\n\n# Include all files by default\ninclude = []\n\n# Exclude no files by default\nexclude = []\n\n[lint]\n# Target version 14 of PostgreSQL by default\npostgres-target-version = 14\n\n# Enable all rules by default\nselect = []\n\n# Disable no rules by default\nignore = []\n\n# Include all files by default\ninclude = []\n\n# Exclude no files by default\nexclude = []\n\n# Ignore suppressing violations that are marked as `noqa` by default\nignore-noqa = false\n\n# Disallowed schemas\ndisallowed-schemas = []\n\n# Allowed extensions\nallowed-extensions = []\n\n# Allowed languages\nallowed-languages = []\n\n# Do not fix violations automatically\nfix = false\n\n# Disallowed data types\ndisallowed-data-types = []\n\n# Required columns\nrequired-columns = []\n\n# Suffix Timestamp columns with `_at` by default\ntimestamp-column-suffix = \"_at\"\n\n# Suffix Date columns with suffix `_date` by default\ndate-column-suffix = \"_date\"\n\n# Allow nay naming convention for partitions by default\nregex-partition = \"^.+$\"\n\n# Allow all any naming convention for indexes by default\nregex-index = \"^.+$\"\n\n# Allow any naming convention for primary key constraints by default\nregex-constraint-primary-key = \"^.+$\"\n\n# ALlow any naming convention for unique keys by default\nregex-constraint-unique-key = \"^.+$\"\n\n# Allow any naming convention for foreign keys by default\nregex-constraint-foreign-key = \"^.+$\"\n\n# Allow any naming convention for check constraints by default\nregex-constraint-check = \"^.+$\"\n\n# Allow any naming convention for exclusion constraints by default\nregex-constraint-exclusion = \"^.+$\"\n\n# Allow any naming convention for sequences by default\nregex-sequence = \"^.+$\"\n\n[format]\n# Include all files by default\ninclude = []\n\n# Exclude no files by default\nexclude = []\n\n# Comma at the beginning of an item by default\ncomma-at-beginning = true\n\n# New line before semicolon false by default\nnew-line-before-semicolon = false\n\n# Remove pg_catalog from functions by default\nremove-pg-catalog-from-functions = true\n\n# Separate statements by a certain number by of new line, 1 by default\nlines-between-statements = 1\n\n# Check if files would have been modified, returning a non-zero exit code\ncheck = false\n\n# Report if files would have been modified, returning a non-zero exit code as well\n# the difference between the current file and how the formatted file would look like\ndiff = false\n\n# Whether to read the cache.\nno-cache = false\n</code></pre> <p>To learn more about each setting, see settings.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to pgrubic!. Contributions are welcome, whether they are bug reports, feature requests, code improvements, documentation updates, or new features. Contributions are welcome in form of Pull Requests. This guide will help you get started with the contributing process.</p> <p>For significant changes, such as new rules, please consider creating an issue to outline your proposed feature for discussion.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>To set up a development environment, you will need tox, pre-commit, and python 3.12 or higher.</p> <ol> <li> <p>Install tox and pre-commit:</p> <pre><code>python3.12 -m pip install --upgrade tox pre-commit\n</code></pre> </li> <li> <p>Create and activate a virtual environment:</p> <pre><code>tox -e dev --devenv .venv\nsource .venv/bin/activate\n</code></pre> </li> <li> <p>Set up the git hook scripts</p> <pre><code>pre-commit install\n</code></pre> </li> </ol>"},{"location":"contributing/#project-structure","title":"Project Structure","text":"<pre><code>.\n\u251c\u2500\u2500 src\n    \u251c\u2500\u2500 pgrubic\n        \u251c\u2500\u2500 core             # Core functionalities\n        \u2502   \u251c\u2500\u2500 cache.py     # Caching of formatted files\n        \u2502   \u251c\u2500\u2500 config.py    # Configuration\n        |   \u251c\u2500\u2500 errors.py    # Errors\n        \u2502   \u251c\u2500\u2500 filters.py   # Sources filtering based on certain settings and `.sql` extension\n        \u2502   \u251c\u2500\u2500 logger.py    # Logger\n        \u2502   \u251c\u2500\u2500 loader.py    # Loading of rules\n        \u2502   \u251c\u2500\u2500 noqa.py      # noqa directive handling\n        \u2502   \u251c\u2500\u2500 linter.py    # Linter\n        |   \u251c\u2500\u2500 formatter.py # Formatter\n        \u2502\u2500\u2500 formatters\n        \u2502   \u251c\u2500\u2500 ddl          # Formatters for DDL statements\n        \u2502   \u251c\u2500\u2500 dml          # Formatters for DML statements\n        |\u2500\u2500 rules\n        \u2502   \u251c\u2500\u2500 constraint   # Rules about constraints\n        \u2502   \u251c\u2500\u2500 general      # Rules about general design practices\n        \u2502   \u251c\u2500\u2500 naming       # Rules about naming conventions\n        \u2502   \u251c\u2500\u2500 schema       # Rules about schemas\n        \u2502   \u251c\u2500\u2500 security     # Rules about security such as extensions and procedural languages\n        \u2502   \u251c\u2500\u2500 typing       # Rules about typing\n        \u2502   \u251c\u2500\u2500 unsafe       # Rules about unsafe migrations\n\u2502\u2500\u2500 docs                     # Documentation\n\u2502\u2500\u2500 tests                    # Tests\n    \u2502\u2500\u2500 fixtures             # Test fixtures\n        \u2502\u2500\u2500 rules            # Rule fixtures\n        \u2502\u2500\u2500 formatters       # Formatter fixtures\n\u2502\u2500\u2500 tools                    # Tools\n\u2502\u2500\u2500 pyproject.toml           # Pyproject file\n</code></pre>"},{"location":"contributing/#architecture","title":"Architecture","text":"<p>pgrubic has two components:</p> <ol> <li>The Linter: The linter loads the rules and check SQL files against the rules.</li> <li>The Formatter: The formatter formats SQL files.</li> </ol>"},{"location":"contributing/#rules","title":"Rules","text":"<p>There are currently 7 categories of rules:</p> <ol> <li>Constraint: Rules about constraints.</li> <li>General: Rules about general design practices.</li> <li>Naming: Rules about naming conventions.</li> <li>Schema: Rules about schemas.</li> <li>Security: Rules about security such as extensions and procedural languages.</li> <li>Typing: Rules about typing.</li> <li>Unsafe: Rules about unsafe migrations.</li> </ol> <p>Rules use visitor pattern. This allows for traversing an Abstract Syntax Tree (AST) and applying specific checks at each node type. When implementing new rules, keep the following in mind:</p> <ul> <li>The rule should inherit from the base checker</li> <li>Documentation is provided through the docstring of the rule</li> <li>The rule should implement a set of particular named method(s), specifically <code>visit_XYZ</code> where XYZ is the name of the AST node it is visiting. List of nodes can be found here.</li> <li>The rule should add necessary violation to the violations list</li> <li>Fixes must not have side effects, in the sense that such fixes should not trigger violation of another rule</li> </ul>"},{"location":"contributing/#adding-a-new-rule","title":"Adding a new rule","text":"<p>To add a new rule, you need to:</p> <ol> <li>Identify the right category of the rule.</li> <li>The code of the rule should be the next number in the rule category e.g. <code>GN030</code></li> <li>Create a file with a name matching the code of the rule e.g. <code>GN030.py</code>, in <code>/pgrubic/src/pgrubic/core/rules/{category}</code> directory for the rule.</li> <li>Inside the file, define a class with a name that explains the purpose of the rule e.g. <code>MissingPrimaryKey</code>. This name will be used in the documentation, so please keep it short and concise. The class should be inherited from the base checker.</li> <li>Write detailed documentation in the docstring of the class.</li> <li>Implement the visitor's method to visit the necessary AST node(s).</li> <li>Add the violation of the rule to the violations list.</li> <li>Implement fix to the rule if needed. The fix should not trigger violation of another rule.</li> <li>Implement proper testing for the rule.</li> <li>Update the generated documentation for rules through:</li> </ol> <pre><code>tox -e docbuild\n</code></pre>"},{"location":"contributing/#testing","title":"Testing","text":"<p>Test files are located in <code>/pgrubic/tests</code> directory. To test a rule, you need to:</p> <ol> <li>Create a fixture for the rule in e.g. <code>/pgrubic/tests/fixtures/rules/{rule_category}/{rule_code}.yml</code>.</li> <li>Inside the file, write the necessary tests including, violations and non-violations tests.</li> <li>To run the tests for all rules, use:</li> </ol> <pre><code>tox -e tests -- tests/test_rules.py\n</code></pre> <ol> <li>To run specific test, for example, use:</li> </ol> <pre><code>tox -e tests -- \"tests/test_rules.py::test_rules[US028-US028_test_pass_concurrent_materialized_view_refresh-test_case767]\"\n</code></pre>"},{"location":"contributing/#formatter","title":"Formatter","text":"<p>Formatters are categorized into two:</p> <ol> <li>DDL: for DDL statements such as CREATE, ALTER, DROP, etc. These formatters are located in <code>/pgrubic/src/pgrubic/core/formatters/ddl/</code>.</li> <li>DML: for DML statements such as INSERT, UPDATE, etc. These formatters are located in <code>/pgrubic/src/pgrubic/core/formatters/dml/</code>.</li> </ol> <p>We try to have a file per a specific object type such as table, index, etc.</p>"},{"location":"contributing/#adding-a-new-formatter","title":"Adding a new formatter","text":"<p>To add a new formatter, you need to:</p> <ul> <li>Identify the correct category</li> <li>Create a new file with a name matching the object tag e.g. <code>table</code> or use the right existing file</li> <li>Inside the file, implement the formatter</li> </ul>"},{"location":"contributing/#testing_1","title":"Testing","text":"<p>Test files are located in <code>/pgrubic/tests</code> directory. To test a rule, you need to:</p> <ol> <li>Create a fixture for the formatter in e.g. <code>/pgrubic/tests/fixtures/formatters/{rule_category}/{formatter}.yml</code>.</li> <li>Inside the file, write the necessary tests, including the input SQL and expected output.</li> <li>To run the tests for all formatters, use:</li> </ol> <pre><code>tox -e tests -- tests/test_formatters.py\n</code></pre> <ol> <li>To run specific test, for example, use:</li> </ol> <pre><code>tox -e tests -- \"tests/test_formatters.py::test_formatters[VIEW-VIEW_drop_view-test_case94]\"\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>To update the documentation, use:</p> <pre><code>tox -e docbuild\n</code></pre> <p>To preview changes to the documentation, from the parent directory, use:</p> <pre><code>mkdocs serve --config-file docs/mkdocs.yml\n</code></pre>"},{"location":"contributing/#release","title":"Release","text":"<p>The project uses commitizen to manage releases. To create a new release, follow the steps below:</p> <ol> <li> <p>Prepare a new release by running</p> <pre><code>tools/prepare_release.sh\n</code></pre> <p>The above script automatically creates a branch named <code>Release</code>, runs <code>tox -e prepare-release</code> (which wraps around <code>cz bump</code>), and pushes the changes to the remote repository.</p> </li> <li> <p>Create a pull request and get the changes merged</p> </li> <li> <p>Push the tags, along with the latest tag</p> <pre><code>git push origin --tags\n</code></pre> </li> </ol>"},{"location":"formatter/","title":"Formatter","text":"<p>The core principle of the pgrubic formatter is to make SQL statements easy to read, easy to maintain, less prone to error and beautiful to see. The formatter is opinionated with few configuration options.</p>"},{"location":"formatter/#components","title":"Components","text":"<p>There are two components of the formatter:</p> <ul> <li>DDL: Designed to be almost identical with pg_dump styling, with differences on subcommands.</li> <li>DML: Designed to produce river style.</li> </ul>"},{"location":"formatter/#runing-the-formatter","title":"Runing the formatter","text":"<p>While the formatter can used as a library, it is primarily intended to be used as a command-line tool. The linter can be run from the command line using the <code>pgrubic format</code> command:</p> <pre><code>pgrubic format                         # Format SQL files in the current directory (and any subdirectories)\npgrubic format .                       # Format SQL files in the current directory (and any subdirectories)\npgrubic format directory               # Format SQL files in *directory* (and any subdirectories)\npgrubic format directory/*.sql         # Format SQL files in *directory*\npgrubic format directory/file.sql      # Format `file.sql` in *directory*\npgrubic format file.sql                # Format `file.sql`\n</code></pre>"},{"location":"formatter/#configuration","title":"Configuration","text":"<p>The formatter is opinionated, with few configuration options. For example, the following configuration</p> pgrubic.toml <pre><code>[format]\ncomma-at-beginning = true\n</code></pre> <p>will add comma as a prefix as opposed to a suffix when formatting a list of items, such as list of columns in which each column is on a separate line.</p> <pre><code>select column1\n     , column2\n     , column3\n     , .......\n</code></pre> <p>when <code>false</code>:</p> <pre><code>select column1,\n       column2,\n       column3,\n       .......\n</code></pre> <p>For the full list of all supported settings, see settings.</p>"},{"location":"formatter/#skipping-formatting","title":"Skipping formatting","text":"<p>Similar to several other formatters, the pgrubic formatter provides various ways to skip formatting a statement/file.</p> <ul> <li>To skip formatting a statement, add <code>-- fmt: skip</code> directive to the top of the statement</li> <li>To skip formatting a file, you can use either use <code>-- pgrubic: fmt: skip</code> directive at the top of the file or add the file name to the format.exclude setting</li> </ul>"},{"location":"license/","title":"License","text":"<p>This project is licensed under the terms of the GNU GENERAL PUBLIC LICENSE, Version 3+.</p>"},{"location":"linter/","title":"Linter","text":"<p>The pgrubic linter is a powerful tool designed to ensure your SQL files adhere to best practices and are free from common errors and mistakes.</p>"},{"location":"linter/#running-the-linter","title":"Running the linter","text":"<p>While the linter can used as a library, it is primarily intended to be used as a command-line tool. The linter can be run from the command line using the <code>pgrubic lint</code> command:</p> <pre><code>pgrubic lint                         # Lint SQL files in the current directory (and any subdirectories)\npgrubic lint .                       # Lint SQL files in the current directory (and any subdirectories)\npgrubic lint directory               # Lint SQL files in *directory* (and any subdirectories)\npgrubic lint directory/*.sql         # Lint SQL files in *directory*\npgrubic lint directory/file.sql      # Lint `file.sql` in *directory*\npgrubic lint file.sql                # Lint `file.sql`\npgrubic lint directory/*.sql --fix   # Lint SQL files in *directory* and fix fixable violations automatically\npgrubic lint file.sql --fix          # Lint `file.sql` and fix fixable violations automatically\n</code></pre>"},{"location":"linter/#controlling-the-selected-rules","title":"Controlling the selected rules","text":"<p>Rules can be enabled or disabled using the lint.select and lint.ignore settings. By default, all rules are enabled.</p> <p>lint.select and lint.ignore can be combined in various ways to streamline rule selection. For example, the following configuration</p> pgrubic.toml <pre><code>[lint]\nselect = [\"TP\"]\nignore = [\"TP015\"]\n</code></pre> <p>will enable all the rules with the prefix <code>TP</code>, which falls under the typing category, with the exception of TP015.</p> <p>When working with the default configuration, it is important to note that:</p> <ul> <li>Since all rules are enabled by default, it is recommended that you explicitly enable the specific rules you want enabled since new rules would otherwise be enabled by default when you upgrade</li> <li>lint.ignore takes precedence over lint.select</li> </ul> <p>For the full list of all supported settings, see settings.</p>"},{"location":"linter/#fixing-violations","title":"Fixing violations","text":"<p>There are linting rules whose violations the linter is able to fix on its own, these are called fixable violations. See Auto-fixable to know whether a rule supports fixing.</p> <p>Fix mode is controlled via the fix setting and the command line flag <code>--fix</code>, with the flag taking precedence.</p> <pre><code>pgrubic lint --fix\n</code></pre> <p>Please note that fixes are formatted. Also, inlined sql statements from plpgsql bodies and function calls are not currently fixable.</p>"},{"location":"linter/#disabling-fixes","title":"Disabling fixes","text":"<p>Fixes can be enabled or disabled using the lint.fixable and lint.unfixable settings. By default, all fixes are enabled. For example, the following configuration</p> pgrubic.toml <pre><code>[lint]\nfixable = [\"TP\"]\nunfixable = [\"TP015\"]\n</code></pre> <p>will enable fixes for all the rules with the prefix <code>TP</code>, which falls under the typing category, with the exception of TP015. Please note that unfixable takes precedence over fixable.</p>"},{"location":"linter/#ignoring-violations","title":"Ignoring Violations","text":"<p>Similar to several other linters, the pgrubic linter provides various ways to ignore violations.</p> <ul> <li>To ignore a specific rule violation in a statement, add <code>-- noqa: {code}</code> directive to the top of the statement e.g <code>-- noqa: TP017</code></li> <li>To ignore multiple rule violations in a statement, add <code>-- noqa: {code1}, {code2}, ...</code> directive to the top of the statement e.g <code>-- noqa: TP017, SM001</code></li> <li>To ignore all violations in a statement, add <code>-- noqa</code> directive to the top of the statement</li> <li>To ignore a specific rule violation in a file, add <code>-- pgrubic: noqa: {code}</code> directive to the top of the file e.g <code>-- pgrubic: noqa: TP017</code></li> <li>To ignore multiple rule violations in a file, add <code>-- pgrubic: noqa: {code1}, {code2}, ...</code> directive to the top of the file e.g <code>-- pgrubic: noqa: TP017, SM001</code></li> <li>To ignore all violations in a file, use <code>-- pgrubic: noqa</code> directive to the top of the file</li> <li>To ignore a rule completely, add its code to lint.ignore setting</li> </ul> <p>See Rolling out for additional resources on ignoring violations.</p>"},{"location":"linter/#unused-suppression-comments","title":"Unused suppression comments","text":"<p>pgrubic will automatically warn about ununsed suppression comments.</p>"},{"location":"rules/","title":"Rules","text":"<p>There are 100+ rules and all rules are enabled by default. Rule are divided into 7 categories:</p> <ol> <li>constraint: Rules for constraints</li> <li>general: Rules for best practice</li> <li>query: Rules for queries</li> <li>naming: Rules for naming</li> <li>schema: Rules for schema</li> <li>security: Rules for security</li> <li>typing: Rules for typing</li> <li>unsafe: Rules for unsafe migrations</li> </ol>"},{"location":"rules/#constraint-ct","title":"constraint (CT)","text":"Code Name Stable Auto-fixable CT001 cascade-update CT002 cascade-delete CT003 identity-generated-by-default CT004 remove-constraint CT005 duplicate-primary-key-column CT006 duplicate-unique-key-column"},{"location":"rules/#general-gn","title":"general (GN)","text":"Code Name Stable Auto-fixable GN001 table-inheritance GN002 create-rule GN003 sql-ascii-encoding GN004 missing-primary-key GN005 index-elements-more-than-three GN006 create-enum GN007 missing-replace-in-function GN008 missing-replace-in-procedure GN009 duplicate-column GN010 table-column-conflict GN011 missing-required-column GN012 required-column-removal GN013 nullable-required-column GN014 select-into GN015 drop-cascade GN016 constant-generated-column GN017 id-column GN018 multi-column-partitioning GN019 unlogged-table GN020 current-time GN021 null-constraint GN022 update-without-where-clause GN023 delete-without-where-clause GN024 null-comparison GN025 duplicate-index GN026 not-in GN027 yoda-condition GN028 asterisk GN029 missing-replace-in-view GN030 missing-replace-in-trigger GN031 stringified-null GN032 duplicate-index-column GN033 insert-without-target-columns GN034 typed-table GN035 inline-sql-function-body-wrong-language"},{"location":"rules/#query-qy","title":"query (QY)","text":"Code Name Stable Auto-fixable QY001 ordinal-number-group-by QY002 ordinal-number-order-by"},{"location":"rules/#naming-nm","title":"naming (NM)","text":"Code Name Stable Auto-fixable NM001 invalid-index-name NM002 invalid-primary-key-name NM003 invalid-unique-key-name NM004 invalid-foreign-key-name NM005 invalid-check-constraint-name NM006 invalid-exclusion-constraint-name NM007 invalid-sequence-name NM008 implicit-constraint-name NM009 invalid-partition-name NM010 non-snake-case-identifier NM011 keyword-identifier NM012 special-character-in-identifier NM013 pg-prefix-identifier NM014 single-letter-identifier NM015 timestamp-column-without-suffix NM016 date-column-without-suffix"},{"location":"rules/#schema-sm","title":"schema (SM)","text":"Code Name Stable Auto-fixable SM001 schema-unqualified-object SM002 disallowed-schema"},{"location":"rules/#security-st","title":"security (ST)","text":"Code Name Stable Auto-fixable ST001 extension-whitelist ST002 procedural-language-whitelist ST003 security-definer-function-no-explicit-search-path ST004 security-definer-function-temp-schema-order ST005 security-definer-function-non-temp-schema"},{"location":"rules/#typing-tp","title":"typing (TP)","text":"Code Name Stable Auto-fixable TP001 timestamp-without-timezone TP002 time-with-time-zone TP003 timestamp-with-timezone-with-precision TP004 char TP005 varchar TP006 money TP007 serial TP008 json TP009 integer TP010 smallint TP011 float TP012 xml TP013 hstore TP014 disallowed-data-type TP015 wrongly-typed-required-column TP016 numeric-with-precision TP017 nullable-boolean-field"},{"location":"rules/#unsafe-us","title":"unsafe (US)","text":"Code Name Stable Auto-fixable US001 drop-column US002 column-data-type-change US003 column-rename US004 adding-auto-increment-column US005 adding-auto-increment-identity-column US006 adding-stored-generated-column US007 drop-tablespace US008 drop-database US009 drop-schema US010 not-null-constraint-on-existing-column US011 new-not-null-column-with-volatile-default US012 validating-foreign-key-constraint-on-existing-rows US013 validating-check-constraint-on-existing-rows US014 unique-key-constraint-creating-index US015 primary-key-constraint-creating-index US016 non-concurrent-index-creation US017 index-movement-to-tablespace US018 indexes-movement-to-tablespace US019 non-concurrent-index-drop US020 non-concurrent-reindex US021 drop-table US022 rename-table US023 table-movement-to-tablespace US024 tables-movement-to-tablespace US025 cluster US026 vacuum-full US027 non-concurrent-detach-partition US028 non-concurrent-refresh-materialized-view US029 truncate-table US030 mismatch-column-in-data-type-change US031 new-column-with-volatile-default"},{"location":"settings/","title":"Settings","text":""},{"location":"settings/#global","title":"Global","text":""},{"location":"settings/#cache-dir","title":"cache-dir","text":"<p>Path to the cache directory.</p> <p>If default and the environment variable <code>PGRUBIC_CACHE</code> is set, the environment variable takes precedence or otherwise the non-default set value is always used.</p> <p>Type: <code>str</code></p> <p>Default: <code>\".pgrubic_cache\"</code></p> <p>Example:</p> pgrubic.toml <pre><code>cache-dir = \"~/.cache/pgrubic\"\n</code></pre>"},{"location":"settings/#include","title":"include","text":"<p>A list of file patterns to include in the linting and formatting process.</p> <p>Type: <code>list[str]</code></p> <p>Default: <code>[]</code></p> <p>Example:</p> pgrubic.toml <pre><code>include = [\"V*.sql\"]\n</code></pre>"},{"location":"settings/#exclude","title":"exclude","text":"<p>A list of file patterns to exclude from the linting and formatting process.</p> <p>Type: <code>list[str]</code></p> <p>Default: <code>[]</code></p> <p>Example:</p> pgrubic.toml <pre><code>exclude = [\"test*.sql\"]\n</code></pre>"},{"location":"settings/#respect-gitignore","title":"respect-gitignore","text":"<p>Whether to automatically exclude files that are ignored by <code>.ignore</code>, <code>.gitignore</code>, <code>.git/info/exclude</code>, and global gitignore files. Enabled by default.</p> <p>Type: <code>bool</code></p> <p>Default: <code>True</code></p> <p>Example:</p> pgrubic.toml <pre><code>respect-gitignore = false\n</code></pre>"},{"location":"settings/#lint","title":"Lint","text":""},{"location":"settings/#postgres-target-version","title":"postgres-target-version","text":"<p>The target version of Postgres to lint against. This is used to either enable or disable certain linting rules. For example, <code>DETACH PARTITION CONCURRENTLY</code> was introduced from Postgres 14.</p> <p>Type: <code>int</code></p> <p>Default: <code>14</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\npostgres-target-version = 12\n</code></pre>"},{"location":"settings/#select","title":"select","text":"<p>List of rule aliases or prefixes to enable. It can be the exact code of a rule or an entire category of rules, for example, <code>TP017</code>, <code>TP</code>. All rules are enabled by default. Can be used in combination with <code>ignore</code> to streamline rules selection.</p> <p>Type: <code>list[str]</code></p> <p>Default: <code>[]</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\nselect = [\"TP\"]\n</code></pre>"},{"location":"settings/#ignore","title":"ignore","text":"<p>List of rule aliases or prefixes to disable. It can be the exact code of a rule or an entire category of rules, for example, <code>TP017</code>, <code>TP</code>. Can be used in combination with <code>select</code> to streamline rules selection. Please note that ignore takes precedence over select.</p> <p>Type: <code>list[str]</code></p> <p>Default: <code>[]</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\nignore = [\"TP017\"]\n</code></pre>"},{"location":"settings/#include_1","title":"include","text":"<p>List of file patterns to include in the linting process.</p> <p>Type: <code>list[str]</code></p> <p>Default: <code>[]</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\ninclude = [\"V*.sql\"]\n</code></pre>"},{"location":"settings/#exclude_1","title":"exclude","text":"<p>List of file patterns to exclude from the linting process.</p> <p>Type: <code>list[str]</code></p> <p>Default: <code>[]</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\nexclude = [\"test*.sql\"]\n</code></pre>"},{"location":"settings/#ignore-noqa","title":"ignore-noqa","text":"<p>Whether to ignore <code>NOQA</code> directives in sources. Overridden by the <code>--ignore-noqa</code> command-line flag.</p> <p>Type: <code>bool</code></p> <p>Default: <code>False</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\nignore-noqa = true\n</code></pre>"},{"location":"settings/#allowed-extensions","title":"allowed-extensions","text":"<p>List of allowed postgres extensions.</p> <p>Type: <code>list[str]</code></p> <p>Default: <code>[]</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\nallowed-extensions = [\"pg_stat_statements\"]\n</code></pre>"},{"location":"settings/#allowed-languages","title":"allowed-languages","text":"<p>List of allowed languages.</p> <p>Type: <code>list[str]</code></p> <p>Default: <code>[]</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\nallowed-languages = [\"plpgsql\"]\n</code></pre>"},{"location":"settings/#required-columns","title":"required-columns","text":"<p>List of required columns along with their data types for every table.</p> <p>Type: <code>list[Column]</code></p> <p>Default: <code>[]</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\nrequired-columns = [\n    { name = \"created_at\", data_type = \"timestamptz\" },\n    { name = \"updated_at\", data_type = \"timestamptz\" },\n]\n</code></pre>"},{"location":"settings/#disallowed-schemas","title":"disallowed-schemas","text":"<p>List of disallowed schemas, with reasons for their disallowance and what to use instead.</p> <p>Type: <code>list[DisallowedSchema]</code></p> <p>Default: <code>[]</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\ndisallowed-schemas = [\n    { name = \"public\", reason = \"public schema\", use_instead = \"app\" },\n]\n</code></pre>"},{"location":"settings/#disallowed-data-types","title":"disallowed-data-types","text":"<p>List of disallowed data types, with reasons for their disallowance and what to use instead.</p> <p>Type: <code>list[DisallowedDataType]</code></p> <p>Default: <code>[]</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\ndisallowed-data-types = [\n    { name = \"varchar\", reason = \"text is better\", use_instead = \"text\" },\n]\n</code></pre>"},{"location":"settings/#fix","title":"fix","text":"<p>Whether to automatically fix fixable violations. Overridden by the <code>--fix</code> command-line flag.</p> <p>Type: <code>bool</code></p> <p>Default: <code>False</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\nfix = true\n</code></pre>"},{"location":"settings/#fixable","title":"fixable","text":"<p>List of rule aliases or prefixes to consider fixable. It can be the exact code of a rule or an entire category of rules, for example, <code>TP017</code>, <code>TP</code>. All rules are considered fixable by default. Please note that unfixable takes precedence over fixable.</p> <p>Type: <code>list[str]</code></p> <p>Default: <code>[]</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\nfixable = [\"TP\"]\n</code></pre>"},{"location":"settings/#unfixable","title":"unfixable","text":"<p>List of rule aliases or prefixes to consider unfixable. It can be the exact code of a rule or an entire category of rules, for example, <code>TP017</code>, <code>TP</code>.</p> <p>Type: <code>list[str]</code></p> <p>Default: <code>[]</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\nunfixable = [\"TP017\"]\n</code></pre>"},{"location":"settings/#timestamp-column-suffix","title":"timestamp-column-suffix","text":"<p>Suffix to add to timestamp columns.</p> <p>Type: <code>str</code></p> <p>Default: <code>\"_at\"</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\ntimestamp-column-suffix = \"_at\"\n</code></pre>"},{"location":"settings/#date-column-suffix","title":"date-column-suffix","text":"<p>Suffix to add to date columns.</p> <p>Type: <code>str</code></p> <p>Default: <code>\"_on\"</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\ndate-column-suffix = \"_date\"\n</code></pre>"},{"location":"settings/#regex-partition","title":"regex-partition","text":"<p>Regular expression to match partition names.</p> <p>Type: <code>str</code></p> <p>Default: <code>r\"^[a-z0-9_]+$\"</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\nregex-partition = r\"^[a-z0-9_]+$\"\n</code></pre>"},{"location":"settings/#regex-index","title":"regex-index","text":"<p>Regular expression to match index names.</p> <p>Type: <code>str</code></p> <p>Default: <code>r\"^[a-z0-9_]+$\"</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\nregex-index = r\"^[a-z0-9_]+$\"\n</code></pre>"},{"location":"settings/#regex-constraint-primary-key","title":"regex-constraint-primary-key","text":"<p>Regular expression to match primary key constraint names.</p> <p>Type: <code>str</code></p> <p>Default: <code>r\"^[a-z0-9_]+$\"</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\nregex-constraint-primary-key = r\"^[a-z0-9_]+$\"\n</code></pre>"},{"location":"settings/#regex-constraint-unique-key","title":"regex-constraint-unique-key","text":"<p>Regular expression to match unique key constraint names.</p> <p>Type: <code>str</code></p> <p>Default: <code>r\"^[a-z0-9_]+$\"</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\nregex-constraint-unique-key = r\"^[a-z0-9_]+$\"\n</code></pre>"},{"location":"settings/#regex-constraint-foreign-key","title":"regex-constraint-foreign-key","text":"<p>Regular expression to match foreign key constraint names.</p> <p>Type: <code>str</code></p> <p>Default: <code>r\"^[a-z0-9_]+$\"</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\nregex-constraint-foreign-key = r\"^[a-z0-9_]+$\"\n</code></pre>"},{"location":"settings/#regex-constraint-check","title":"regex-constraint-check","text":"<p>Regular expression to match check constraint names.</p> <p>Type: <code>str</code></p> <p>Default: <code>r\"^[a-z0-9_]+$\"</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\nregex-constraint-check = r\"^[a-z0-9_]+$\"\n</code></pre>"},{"location":"settings/#regex-constraint-exclusion","title":"regex-constraint-exclusion","text":"<p>Regular expression to match exclusion constraint names.</p> <p>Type: <code>str</code></p> <p>Default: <code>r\"^[a-z0-9_]+$\"</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\nregex-constraint-exclusion = r\"^[a-z0-9_]+$\"\n</code></pre>"},{"location":"settings/#regex-sequence","title":"regex-sequence","text":"<p>Regular expression to match sequence names.</p> <p>Type: <code>str</code></p> <p>Default: <code>r\"^[a-z0-9_]+$\"</code></p> <p>Example:</p> pgrubic.toml <pre><code>[lint]\nregex-sequence = r\"^[a-z0-9_]+$\"\n</code></pre>"},{"location":"settings/#format","title":"Format","text":""},{"location":"settings/#include_2","title":"include","text":"<p>A list of file patterns to include in the formatting process.</p> <p>Type: <code>list[str]</code></p> <p>Default: <code>[]</code></p> <p>Example:</p> pgrubic.toml <pre><code>[format]\ninclude = [\"V*.sql\"]\n</code></pre>"},{"location":"settings/#exclude_2","title":"exclude","text":"<p>A list of file patterns to exclude from the formatting process.</p> <p>Type: <code>list[str]</code></p> <p>Default: <code>[]</code></p> <p>Example:</p> pgrubic.toml <pre><code>[format]\nexclude = [\"test*.sql\"]\n</code></pre>"},{"location":"settings/#comma-at-beginning","title":"comma-at-beginning","text":"<p>If <code>true</code>, add comma as a prefix as opposed to a suffix when formatting a list of items, such as list of columns in which each column is on a separate line.</p> <p>For example, when <code>true</code>: <pre><code>select column1\n     , column2\n     , column3\n     , .......\n</code></pre></p> <p>when <code>false</code>: <pre><code>select column1,\n       column2,\n       column3,\n       .......\n</code></pre></p> <p>Type: <code>bool</code></p> <p>Default: <code>true</code></p> <p>Example:</p> pgrubic.toml <pre><code>[format]\ncomma-at-beginning = false\n</code></pre>"},{"location":"settings/#new-line-before-semicolon","title":"new-line-before-semicolon","text":"<p>If <code>true</code>, add a new line before each semicolon.</p> <p>For example, when <code>true</code>: <pre><code>select column1\n        , column2\n        , column3\n    from table\n;\n</code></pre></p> <p>when <code>false</code>: <pre><code>select column1,\n        column2,\n        column3\n    from table;\n</code></pre></p> <p>Type: <code>bool</code></p> <p>Default: <code>false</code></p> <p>Example:</p> pgrubic.toml <pre><code>[format]\nnew-line-before-semicolon = true\n</code></pre>"},{"location":"settings/#lines-between-statements","title":"lines-between-statements","text":"<p>Number of lines between SQL statements.</p> <p>Type: <code>int</code></p> <p>Default: <code>1</code></p> <p>Example:</p> pgrubic.toml <pre><code>[format]\nlines-between-statements = 2\n</code></pre>"},{"location":"settings/#remove-pg-catalog-from-functions","title":"remove-pg-catalog-from-functions","text":"<p>If <code>true</code>, remove the <code>pg_catalog.</code> prefix from functions. Postgres standard functions are located in the <code>pg_catalog</code> schema and thus prefixed with <code>pg_catalog.</code> by default.</p> <p>Type: <code>bool</code></p> <p>Default: <code>true</code></p> <p>Example:</p> pgrubic.toml <pre><code>[format]\nremove-pg-catalog-from-functions = false\n</code></pre>"},{"location":"settings/#diff","title":"diff","text":"<p>When <code>true</code>, report the difference between the current file and how it will look when formatted, without making any changes to the file. If there is a difference, it exits with a non-zero exit code.</p> <p>Overridden by the <code>--diff</code> command-line flag.</p> <p>Type: <code>bool</code></p> <p>Default: <code>false</code></p> <p>Example:</p> pgrubic.toml <pre><code>[format]\ndiff = true\n</code></pre>"},{"location":"settings/#check","title":"check","text":"<p>When <code>true</code>, it exits with a non-zero exit code if the any files would have been modified by the formatter.</p> <p>Overridden by the <code>--check</code> command-line flag.</p> <p>Type: <code>bool</code></p> <p>Default: <code>false</code></p> <p>Example:</p> pgrubic.toml <pre><code>[format]\ncheck = true\n</code></pre>"},{"location":"settings/#no-cache","title":"no-cache","text":"<p>Whether to read the cache. Caching helps speed up the formatting process. When a file has not been modified after the last formatting, it is simply skipped. To force reformatting of a file even if it has not been modified since the last formatting, set to <code>true</code>.</p> <p>Overridden by the <code>--no-cache</code> command-line flag.</p> <p>Type: <code>bool</code></p> <p>Default: <code>false</code></p> <p>Example:</p> pgrubic.toml <pre><code>[format]\nno-cache = true\n</code></pre>"},{"location":"tutorial/","title":"Tutorial","text":"<p>This tutorial will guide you through the process of integrating pgrubic's linter and formatter into your project, both via CLI and as a library.</p>"},{"location":"tutorial/#getting-started","title":"Getting Started","text":""},{"location":"tutorial/#installation","title":"Installation","text":"<p>pgrubic can be installed using pip:</p> <pre><code>pip install pgrubic\n</code></pre> <p>Please note pgrubic is only supported on Python 3.12 or higher.</p>"},{"location":"tutorial/#usage","title":"Usage","text":"<p>We can use pgrubic from the command line to lint and format SQL files. For example, say you have a project structure like the following:</p> <pre><code>migrations\n  \u2514\u2500\u2500 sql\n    \u2514\u2500\u2500 V1__init.sql\n</code></pre> <p>where <code>V1__init.sql</code> contains the following SQL statements:</p> <pre><code>ALTER TABLE public.example ADD COLUMN bar boolean DEFAULT false NOT NULL;\nALTER TABLE public.example ADD COLUMN foo boolean DEFAULT false;\n</code></pre> <p>Let's run the pgrubic linter over the project with <code>pgrubic lint</code>:</p> <pre><code>pgrubic lint\nmigrations/V1__init.sql:2:39: TP017: Boolean field should not be nullable\n2 | ALTER TABLE public.example ADD COLUMN foo boolean DEFAULT false;\n                                          ^\nFound 1 violation(s)\n1 fix(es) available, 1 fix(es) enabled\n</code></pre> <p>pgrubic identified a nullable boolean field, which is most likely an oversight as boolean is either true or false. This is a fixable violation, so we can resolve the violation automatically by running <code>pgrubic check --fix</code>:</p> <pre><code>pgrubic lint --fix\nFound 1 violation(s) (1 fixed, 0 remaining)\n</code></pre> <p>Checking diff with <code>git diff</code> produces the following:</p> <pre><code>--- a/V1__init.sql\n+++ b/V1__init.sql\n@@ -1,2 +1,4 @@\n ALTER TABLE public.example ADD COLUMN bar boolean DEFAULT false NOT NULL;\n-ALTER TABLE public.example ADD COLUMN foo boolean DEFAULT false;\n+\n+ALTER TABLE public.example\n+    ADD COLUMN foo boolean DEFAULT FALSE NOT NULL;\n</code></pre> <p>pgrubic runs in the current directory by default, but we can also give it specific paths:</p> <pre><code>pgrubic lint migrations/V1__init.sql\n</code></pre> <p>We can also format our SQL with <code>pgrubic format</code>:</p> <pre><code>pgrubic format\n\n1 file(s) reformatted, 0 file(s) left unchanged\n</code></pre> <p>Checking diff with <code>git diff</code> produces the following:</p> <pre><code>--- a/V1__init.sql\n+++ b/V1__init.sql\n@@ -1,4 +1,5 @@\n-ALTER TABLE public.example ADD COLUMN bar boolean DEFAULT false NOT NULL;\n+ALTER TABLE public.example\n+    ADD COLUMN bar boolean DEFAULT FALSE NOT NULL;\n\n ALTER TABLE public.example\n     ADD COLUMN foo boolean DEFAULT FALSE NOT NULL;\n</code></pre> <p>So far, we have seen how to use pgrubic from the command line, but we can also use it as a library. For example, say you have a python project structure like the following:</p> <pre><code>migrations\n  \u251c\u2500\u2500 __init__.py\n  \u2514\u2500\u2500 custom_linter.py\n</code></pre> <p>where <code>custom_linter.py</code> contains the following Python code:</p> <pre><code>\"\"\"Custom linter.\"\"\"\n\nfrom pgrubic import core\nfrom pgrubic.rules.typing import TP017\n\n\ndef check_for_nullable_boolean_field(source_file: str, source_code: str) -&gt; None:\n    \"\"\"Linter for nullable boolean field.\"\"\"\n    config: core.Config = core.parse_config()\n\n    linter: core.Linter = core.Linter(config=config, formatters=core.load_formatters)\n\n    linter.checkers.add(TP017.NullableBooleanField())\n\n    linting_result = linter.run(\n        source_file=str(source_file),\n        source_code=source_code,\n    )\n\n    linter.print_violations(\n        violations=linting_result.violations,\n        source_file=str(source_file),\n    )\n\n\ncheck_for_nullable_boolean_field(\n    source_file=\"test.sql\",\n    source_code=\"ALTER TABLE public.example ADD COLUMN bar boolean DEFAULT false;\",\n)\n</code></pre>"},{"location":"tutorial/#configuration","title":"Configuration","text":"<p>We have been using the default configuration. The configuration can also be customized.</p> <p>pgrubic uses pgrubic.toml file for configuration. For a more complete overview, see Configuring pgrubic.</p> <p>To override the default configuration, let's create <code>pgrubic.toml</code> in our project's root directory:</p> pgrubic.toml <pre><code>[lint]\nrequired-columns = [\n    { name = \"foo\", data-type = \"text\" }\n]\n</code></pre> <p>Running pgrubic again, produces the following output:</p> <pre><code>pgrubic lint\nmigrations/V1__init.sql:4:16: TP015: Column 'foo' expected type is 'text', found 'boolean'\n4 |     ADD COLUMN foo boolean DEFAULT FALSE NOT NULL;\n                   ^\nFound 1 violation(s)\n1 fix(es) available, 1 fix(es) enabled\n</code></pre> <p>For the full list of all supported settings, see settings.</p>"},{"location":"tutorial/#selecting-rules","title":"Selecting Rules","text":"<p>pgrubic supports over 100 lint rules across typing, general, constraint, unsafe migrations, naming, schema and security. Please note that all rules are enabled by default.</p> <p>If you are introducing the linter for the first time, you might want to streamline the set of rules that are enabled. In order to enable or disable specific rules, we can use lint.select and lint.ignore settings.</p> pgrubic.toml <pre><code>[lint]\nselect = [\"TP017\"]\nignore = [\"TP015\"]\n</code></pre> <p>Running pgrubic again, produces the following output:</p> <pre><code>pgrubic lint\nFound 0 violation(s)\n0 fix(es) available, 0 fix(es) enabled\n</code></pre> <p>Then over time, you may choose to enable additional rules.</p>"},{"location":"tutorial/#ignoring-violations","title":"Ignoring violations","text":"<p>Every lint rule has a unique code and this code can be used to ignore violations of specific rule(s).</p>"},{"location":"tutorial/#ignore-violations-of-single-rule","title":"Ignore violations of single rule","text":"<p>A lint rule can be ignored by adding a <code>-- noqa: {rule_code}</code> comment to the violating SQL statement. For example, to ignore violations of rule <code>TP017</code>, let's add a new file <code>migrations/V2__init.sql</code> with the following SQL statement:</p> <pre><code>ALTER TABLE public.example ADD COLUMN foo boolean DEFAULT false;\n</code></pre> <p>Let's also include <code>SM001</code> in the list of enabled rules in the <code>pgrubic.toml</code> config file.</p> pgrubic.toml <pre><code>[lint]\nselect = [\n    \"TP017\",\n    \"SM001\",\n]\nignore = [\n    \"TP015\",\n]\n</code></pre> <p>Running pgrubic, produces the following output:</p> <pre><code>pgrubic lint\nmigrations/V2__init.sql:1:13: SM001: Database object `example` should be schema qualified\n1 | ALTER TABLE example ADD COLUMN foo boolean DEFAULT false;\n                ^\n\n/Users/bolajiwahab/repos/bolajiwahab/migrations/V2__init.sql:1:32: TP017: Boolean field should be not be nullable\n1 | ALTER TABLE example ADD COLUMN foo boolean DEFAULT false;\n                                   ^\nFound 2 violation(s)\n1 fix(es) available, 1 fix(es) enabled\n</code></pre> <p>To ignore the violation from <code>TP017</code>, let's add <code>-- noqa: TP017</code> to the SQL statement:</p> <pre><code>-- noqa: TP017\nALTER TABLE public.example ADD COLUMN foo boolean DEFAULT false;\n</code></pre> <p>Running pgrubic again, produces the following output:</p> <pre><code>pgrubic lint\nmigrations/V2__init.sql:2:13: SM001: Database object `example` should be schema qualified\n2 | ALTER TABLE example ADD COLUMN foo boolean DEFAULT false;\n                ^\nFound 1 violation(s)\n0 fix(es) available, 0 fix(es) enabled\n</code></pre>"},{"location":"tutorial/#ignoring-violations-of-multiple-lint-rules","title":"Ignoring violations of multiple lint rules","text":"<p>We can also ignore multiple lint rules at the same time. This is achieved by adding <code>-- noqa: {rule_code(s)}</code>, with the rule codes separated by a comma. For example, <code>-- noqa: TP017, SM001</code>.</p> <p>Let's also add the <code>SM001</code> to the <code>noqa</code> comment in the <code>migrations/V2__init.sql</code> file:</p> <pre><code>-- noqa: TP017, SM001\nALTER TABLE public.example ADD COLUMN foo boolean DEFAULT false;\n</code></pre> <p>Running pgrubic again, produces the following output:</p> <pre><code>pgrubic lint\nFound 0 violation(s)\n0 fix(es) available, 0 fix(es) enabled\n</code></pre>"},{"location":"tutorial/#ignoring-all-violations","title":"Ignoring all violations","text":"<p>To ignore all lint violations, we can add plain <code>-- noqa</code> to the SQL statement. Let's update the <code>noqa</code> comment in the <code>migrations/V2__init.sql</code> file:</p> <pre><code>-- noqa\nALTER TABLE public.example ADD COLUMN foo boolean DEFAULT false;\n</code></pre> <p>Running pgrubic again, produces the following output:</p> <pre><code>pgrubic lint\nFound 0 violation(s)\n0 fix(es) available, 0 fix(es) enabled\n</code></pre>"},{"location":"tutorial/#ignoring-violations-in-entire-file","title":"Ignoring violations in entire file","text":"<ul> <li>To ignore all violations in a file for a specific rule, we can add <code>-- pgrubic: noqa: {rule_code}</code> to the beginning of the file</li> <li>To ignore all violations in a file for multiple rules, we can add <code>-- pgrubic: noqa: {rule_code(s)}</code> to the beginning of the file, with the rule codes separated by a comma. For example, <code>-- pgrubic: noqa: TP017, SM001</code></li> <li>To ignore all violations in a file for all rules, we can add <code>-- pgrubic: noqa</code> to the beginning of the file</li> </ul> <p>For more on ignoring violations, please see Ignoring violations.</p>"},{"location":"tutorial/#rolling-out","title":"Rolling out","text":"<p>When introducing a new linter, most of the time, we may want to ignore all existing violations, especially on existing large codebases in order to streamline the roll-out process and instead focus on enforcing the linter going forward.</p> <p>pgrubic supports this roll-out strategy via the command-line <code>--add-file-level-general-noqa</code> flag. When set, it will automatically add a <code>-- pgrubic: noqa</code> directive to the beginning of each SQL file to ignore all existing violations:</p> <pre><code>pgrubic lint --add-file-level-general-noqa\nFile-level general noqa directive added to 1 file(s)\n</code></pre> <p>Checking diff with <code>git diff</code> produces the following:</p> <pre><code>--- a/V1__init.sql\n+++ b/V1__init.sql\n@@ -1,3 +1,4 @@\n+-- pgrubic: noqa\n ALTER TABLE public.example\n     ADD COLUMN bar boolean DEFAULT FALSE NOT NULL;\n</code></pre>"},{"location":"tutorial/#pre-commit","title":"Pre-commit","text":"<p>pgrubic comes with two pre-commit hooks:</p> <ul> <li>pgrubic-lint: lint changed files.</li> <li>pgrubic-format: format changed files.</li> </ul> <p>Create a file named <code>.pre-commit-config.yaml</code> at the root of your git project. The file should look like this:</p> <pre><code>- repo: https://github.com/bolajiwahab/pgrubic\n  # The version of pgrubic to use.\n  rev: 0.10.0\n  hooks:\n    - id: pgrubic-lint\n    - id: pgrubic-format\n</code></pre> <p>To know more about pre-commit hooks, see pre-commit.</p>"},{"location":"tutorial/#parallelism","title":"Parallelism","text":"<p>pgrubic supports parallelism via the command-line <code>--workers</code> flag and the <code>PGRUBIC_WORKERS</code> environment variable, with the flag when provided taking precedence over the environment variable while the environment variable takes precedence over the default number of workers (<code>4</code>).</p> <p>pgrubic runs with the smallest of these values: the number of CPUs or the number of workers.</p> <pre><code>pgrubic lint --workers 4\npgrubic format --workers 4\n</code></pre> <p>With parallelism, pgrubic will run the linter and formatter concurrently on multiple processes. This can help speed up the process of linting and formatting.</p>"},{"location":"rules/constraint/cascade-delete/","title":"cascade-delete (CT002)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/constraint/cascade-delete/#pgrubic.rules.constraint.CT002.CascadeDelete--what-it-does","title":"What it does","text":"<p>Checks for usage of cascade update.</p>"},{"location":"rules/constraint/cascade-delete/#pgrubic.rules.constraint.CT002.CascadeDelete--why-not","title":"Why not?","text":"<p>Database schema should follow the principle of least surprise which says that every component in a system should behave in a way that most users expect it to behave, and therefore not surprise or astonish them.</p> <p>Cascading deletes should not cause unexpected loss of data. It is certainly dangerous if deleting a single table row can wipe out half your database.</p> <p>Are you certain you want to take the chance that someone will delete a single reference entry, unaware that doing so may delete a billion related transactions?</p>"},{"location":"rules/constraint/cascade-delete/#pgrubic.rules.constraint.CT002.CascadeDelete--when-should-you","title":"When should you?","text":"<p>Almost never.</p>"},{"location":"rules/constraint/cascade-delete/#pgrubic.rules.constraint.CT002.CascadeDelete--use-instead","title":"Use instead:","text":"<p>Restrict</p>"},{"location":"rules/constraint/cascade-update/","title":"cascade-update (CT001)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/constraint/cascade-update/#pgrubic.rules.constraint.CT001.CascadeUpdate--what-it-does","title":"What it does","text":"<p>Checks for usage of cascade update.</p>"},{"location":"rules/constraint/cascade-update/#pgrubic.rules.constraint.CT001.CascadeUpdate--why-not","title":"Why not?","text":"<p>In theory primary key should be static so changes that need cascading should not need to happen. If you find yourself needing this sort of cascaded updates then that is perhaps a code smell in your database design.</p>"},{"location":"rules/constraint/cascade-update/#pgrubic.rules.constraint.CT001.CascadeUpdate--when-should-you","title":"When should you?","text":"<p>Almost never.</p>"},{"location":"rules/constraint/cascade-update/#pgrubic.rules.constraint.CT001.CascadeUpdate--use-instead","title":"Use instead:","text":"<p>Restrict</p>"},{"location":"rules/constraint/duplicate-primary-key-column/","title":"duplicate-primary-key-column (CT005)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/constraint/duplicate-primary-key-column/#pgrubic.rules.constraint.CT005.DuplicatePrimaryKeyColumn--what-it-does","title":"What it does","text":"<p>Checks for duplicate column in primary key.</p>"},{"location":"rules/constraint/duplicate-primary-key-column/#pgrubic.rules.constraint.CT005.DuplicatePrimaryKeyColumn--why-not","title":"Why not?","text":"<p>While PostgreSQL does not allow duplicate columns in a primary key constraint, such constructs are still parseable, but will error out at runtime.</p> <p>Having a duplicate column in a primary key is an obvious error.</p>"},{"location":"rules/constraint/duplicate-primary-key-column/#pgrubic.rules.constraint.CT005.DuplicatePrimaryKeyColumn--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/constraint/duplicate-primary-key-column/#pgrubic.rules.constraint.CT005.DuplicatePrimaryKeyColumn--use-instead","title":"Use instead:","text":"<p>Remove duplicate column from the primary key constraint.</p>"},{"location":"rules/constraint/duplicate-unique-key-column/","title":"duplicate-unique-key-column (CT006)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/constraint/duplicate-unique-key-column/#pgrubic.rules.constraint.CT006.DuplicateUniqueKeyColumn--what-it-does","title":"What it does","text":"<p>Checks for duplicate column in unique key constraint.</p>"},{"location":"rules/constraint/duplicate-unique-key-column/#pgrubic.rules.constraint.CT006.DuplicateUniqueKeyColumn--why-not","title":"Why not?","text":"<p>While PostgreSQL does not allow duplicate columns in a unique key constraint, such constructs are still parseable, but will error out at runtime.</p> <p>Having a duplicate column in a unique key constraint is an obvious error.</p>"},{"location":"rules/constraint/duplicate-unique-key-column/#pgrubic.rules.constraint.CT006.DuplicateUniqueKeyColumn--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/constraint/duplicate-unique-key-column/#pgrubic.rules.constraint.CT006.DuplicateUniqueKeyColumn--use-instead","title":"Use instead:","text":"<p>Remove duplicate column from the unique key constraint.</p>"},{"location":"rules/constraint/identity-generated-by-default/","title":"identity-generated-by-default (CT003)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/constraint/identity-generated-by-default/#pgrubic.rules.constraint.CT003.IdentityGeneratedByDefault--what-it-does","title":"What it does","text":"<p>Checks for identity generated by default.</p>"},{"location":"rules/constraint/identity-generated-by-default/#pgrubic.rules.constraint.CT003.IdentityGeneratedByDefault--why-not","title":"Why not?","text":"<p>GENERATED BY DEFAULT allows you to specify a value for insert or update on an identity column instead of system generated value. This is usually not what you want for an identity column.</p>"},{"location":"rules/constraint/identity-generated-by-default/#pgrubic.rules.constraint.CT003.IdentityGeneratedByDefault--when-should-you","title":"When should you?","text":"<p>If you want to be able to specify a value for insert or update on an identity column instead of system generated value.</p>"},{"location":"rules/constraint/identity-generated-by-default/#pgrubic.rules.constraint.CT003.IdentityGeneratedByDefault--use-instead","title":"Use instead:","text":"<p>GENERATED ALWAYS</p>"},{"location":"rules/constraint/remove-constraint/","title":"remove-constraint (CT004)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/constraint/remove-constraint/#pgrubic.rules.constraint.CT004.RemoveConstraint--what-it-does","title":"What it does","text":"<p>Checks for removal of constraints.</p>"},{"location":"rules/constraint/remove-constraint/#pgrubic.rules.constraint.CT004.RemoveConstraint--why-not","title":"Why not?","text":"<p>Constraints are used to ensure data quality, data integrity, consistency, and adherence to certain business rules.</p> <p>If a constraint is removed without due consideration, the data in the database can become corrupted.</p>"},{"location":"rules/constraint/remove-constraint/#pgrubic.rules.constraint.CT004.RemoveConstraint--when-should-you","title":"When should you?","text":"<p>You can remove constraints if they are no longer needed or need adjustment. Don't just remove them without due consideration.</p>"},{"location":"rules/constraint/remove-constraint/#pgrubic.rules.constraint.CT004.RemoveConstraint--use-instead","title":"Use instead:","text":"<p>No suggestions.</p>"},{"location":"rules/general/asterisk/","title":"asterisk (GN028)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/general/asterisk/#pgrubic.rules.general.GN028.Asterisk--what-it-does","title":"What it does","text":"<p>Checks for usage of asterisk (*) in column references.</p>"},{"location":"rules/general/asterisk/#pgrubic.rules.general.GN028.Asterisk--why-not","title":"Why not?","text":"<p>Specifying the columns in a query explicitly greatly improves clarity and readability. This approach helps developers quickly grasp the purpose of the query and fosters better collaboration.</p> <p>Also, using asterisk () in column references complicates code maintenance. When the table structure changes, such as adding, renaming, or removing columns, queries with asterisk () can fail unexpectedly or silently return incorrect results. Examples are (SELECT * or RETURNING *).</p> <p>By explicitly listing the necessary columns, you ensure the code is more resilient to changes in the database schema.</p>"},{"location":"rules/general/asterisk/#pgrubic.rules.general.GN028.Asterisk--when-should-you","title":"When should you?","text":"<p>Almost Never.</p>"},{"location":"rules/general/asterisk/#pgrubic.rules.general.GN028.Asterisk--use-instead","title":"Use instead:","text":"<p>Name Columns Explicitly.</p>"},{"location":"rules/general/constant-generated-column/","title":"constant-generated-column (GN016)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/general/constant-generated-column/#pgrubic.rules.general.GN016.ConstantGeneratedColumn--what-it-does","title":"What it does","text":"<p>Checks for usage of constant generated columns.</p>"},{"location":"rules/general/constant-generated-column/#pgrubic.rules.general.GN016.ConstantGeneratedColumn--why-not","title":"Why not?","text":"<p>Always generating a constant value for a column is not useful and only leads to duplicated data all over the place and wastage of storage.</p>"},{"location":"rules/general/constant-generated-column/#pgrubic.rules.general.GN016.ConstantGeneratedColumn--when-should-you","title":"When should you?","text":"<p>If the table will be storing just one row at any point in time.</p>"},{"location":"rules/general/constant-generated-column/#pgrubic.rules.general.GN016.ConstantGeneratedColumn--use-instead","title":"Use instead:","text":"<p>Generated column with expression.</p>"},{"location":"rules/general/create-enum/","title":"create-enum (GN006)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/general/create-enum/#pgrubic.rules.general.GN006.CreateEnum--what-it-does","title":"What it does","text":"<p>Checks for creation of enum.</p>"},{"location":"rules/general/create-enum/#pgrubic.rules.general.GN006.CreateEnum--why-not","title":"Why not?","text":"<p>Enum types are primarily intended for static sets of values, though there is support for adding new values to an existing enum type, and for renaming values however existing values cannot be removed from an enum type, nor can the sort ordering of such values be changed, short of dropping and re-creating the enum type.</p>"},{"location":"rules/general/create-enum/#pgrubic.rules.general.GN006.CreateEnum--when-should-you","title":"When should you?","text":"<p>If your set of values are fixed such that you won't be removing values in the future. Just don't use it automatically without thinking about it.</p>"},{"location":"rules/general/create-enum/#pgrubic.rules.general.GN006.CreateEnum--use-instead","title":"Use instead:","text":"<p>Mapping table.</p>"},{"location":"rules/general/create-rule/","title":"create-rule (GN002)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/general/create-rule/#pgrubic.rules.general.GN002.CreateRule--what-it-does","title":"What it does","text":"<p>Checks for creation of rules.</p>"},{"location":"rules/general/create-rule/#pgrubic.rules.general.GN002.CreateRule--why-not","title":"Why not?","text":"<p>Rules are incredibly powerful, but they don't do what they look like they do. They look like they're some conditional logic, but they actually rewrite a query to modify it or add additional queries to it.</p>"},{"location":"rules/general/create-rule/#pgrubic.rules.general.GN002.CreateRule--when-should-you","title":"When should you?","text":"<p>Never. While the rewriter is an implementation detail of VIEWs, there is no reason to pry up this cover plate directly.</p>"},{"location":"rules/general/create-rule/#pgrubic.rules.general.GN002.CreateRule--use-instead","title":"Use instead:","text":"<p>Don't use rules. If you think you want to, use a trigger instead.</p>"},{"location":"rules/general/current-time/","title":"current-time (GN020)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/general/current-time/#pgrubic.rules.general.GN020.CurrentTime--what-it-does","title":"What it does","text":"<p>Checks for use of CURRENT_TIME function.</p>"},{"location":"rules/general/current-time/#pgrubic.rules.general.GN020.CurrentTime--why-not","title":"Why not?","text":"<p>It returns a value of type time with time zone.</p> <p>The manual has more to say about this type:</p> <p>The type time with time zone is defined by the SQL standard, but the definition exhibits properties which lead to questionable usefulness. In most cases, a combination of date, time, timestamp without time zone, and timestamp with time zone should provide a complete range of date/time functionality required by any application.</p>"},{"location":"rules/general/current-time/#pgrubic.rules.general.GN020.CurrentTime--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/general/current-time/#pgrubic.rules.general.GN020.CurrentTime--use-instead","title":"Use instead:","text":"<p>Do not use the CURRENT_TIME function. Use whichever of these is appropriate:</p> <ul> <li>CURRENT_TIMESTAMP or now() if you want a timestamp with time zone,</li> <li>LOCALTIMESTAMP if you want a timestamp without time zone,</li> <li>CURRENT_DATE if you want a date,</li> <li>LOCALTIME if you want a time</li> </ul>"},{"location":"rules/general/delete-without-where-clause/","title":"delete-without-where-clause (GN023)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/general/delete-without-where-clause/#pgrubic.rules.general.GN023.DeleteWithoutWhereClause--what-it-does","title":"What it does","text":"<p>Checks for DELETE without a WHERE clause.</p>"},{"location":"rules/general/delete-without-where-clause/#pgrubic.rules.general.GN023.DeleteWithoutWhereClause--why-not","title":"Why not?","text":"<p>Executing a DELETE line without a WHERE clause will remove all the rows in the table which is most likely an accidental mistake and not what you want.</p>"},{"location":"rules/general/delete-without-where-clause/#pgrubic.rules.general.GN023.DeleteWithoutWhereClause--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/general/delete-without-where-clause/#pgrubic.rules.general.GN023.DeleteWithoutWhereClause--use-instead","title":"Use instead:","text":"<p>Add necessary WHERE clause.</p>"},{"location":"rules/general/drop-cascade/","title":"drop-cascade (GN015)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/general/drop-cascade/#pgrubic.rules.general.GN015.DropCascade--what-it-does","title":"What it does","text":"<p>Checks for usage of cascade in drop statements.</p>"},{"location":"rules/general/drop-cascade/#pgrubic.rules.general.GN015.DropCascade--why-not","title":"Why not?","text":"<p>Database schema should follow the principle of least surprise which says that every component in a system should behave in a way that most users expect it to behave, and therefore not surprise or astonish them.</p> <p>Cascading drops should not cause unexpected loss of data. It is certainly dangerous if dropping a single table can wipe out half your database.</p> <p>Are you certain you want cascade drop thus dropping every dependent objects?</p>"},{"location":"rules/general/drop-cascade/#pgrubic.rules.general.GN015.DropCascade--when-should-you","title":"When should you?","text":"<p>Almost never.</p>"},{"location":"rules/general/drop-cascade/#pgrubic.rules.general.GN015.DropCascade--use-instead","title":"Use instead:","text":"<p>Remove the cascade or use restrict</p>"},{"location":"rules/general/duplicate-column/","title":"duplicate-column (GN009)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/general/duplicate-column/#pgrubic.rules.general.GN009.DuplicateColumn--what-it-does","title":"What it does","text":"<p>Checks for duplicate columns.</p>"},{"location":"rules/general/duplicate-column/#pgrubic.rules.general.GN009.DuplicateColumn--why-not","title":"Why not?","text":"<p>Each column in a table must have a unique name within that table to ensure unambiguous reference and avoid confusion during SQL operations. It ensures data integrity and clarity in database design and manipulation.</p>"},{"location":"rules/general/duplicate-column/#pgrubic.rules.general.GN009.DuplicateColumn--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/general/duplicate-column/#pgrubic.rules.general.GN009.DuplicateColumn--use-instead","title":"Use instead:","text":"<p>Remove duplicate columns.</p>"},{"location":"rules/general/duplicate-index-column/","title":"duplicate-index-column (GN032)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/general/duplicate-index-column/#pgrubic.rules.general.GN032.DuplicateIndexColumn--what-it-does","title":"What it does","text":"<p>Checks for duplicate index column.</p>"},{"location":"rules/general/duplicate-index-column/#pgrubic.rules.general.GN032.DuplicateIndexColumn--why-not","title":"Why not?","text":"<p>Having duplicate column in an index is redundant and unnecessary. Indexes are not free, they add an overhead to write operations, and having a column repeated does not add any benefit but rather unnecessary index maintenance and storage.</p>"},{"location":"rules/general/duplicate-index-column/#pgrubic.rules.general.GN032.DuplicateIndexColumn--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/general/duplicate-index-column/#pgrubic.rules.general.GN032.DuplicateIndexColumn--use-instead","title":"Use instead:","text":"<p>Remove duplicate column from the index.</p>"},{"location":"rules/general/duplicate-index/","title":"duplicate-index (GN025)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/general/duplicate-index/#pgrubic.rules.general.GN025.DuplicateIndex--what-it-does","title":"What it does","text":"<p>Checks for duplicate indexes (exact match).</p>"},{"location":"rules/general/duplicate-index/#pgrubic.rules.general.GN025.DuplicateIndex--why-not","title":"Why not?","text":"<p>Having duplicate indexes can negatively affect performance of database operations in several ways, some of which are as follows:</p> <ul> <li>Slower Write Operations</li> <li>Maintenance Overhead</li> <li>Increased Storage Costs</li> </ul> <p>In summary, indexes are not cheap and what is worst is having them duplicated.</p>"},{"location":"rules/general/duplicate-index/#pgrubic.rules.general.GN025.DuplicateIndex--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/general/duplicate-index/#pgrubic.rules.general.GN025.DuplicateIndex--use-instead","title":"Use instead:","text":"<p>Remove the duplicate.</p>"},{"location":"rules/general/id-column/","title":"id-column (GN017)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/general/id-column/#pgrubic.rules.general.GN017.IdColumn--what-it-does","title":"What it does","text":"<p>Checks for usage of ID columns.</p>"},{"location":"rules/general/id-column/#pgrubic.rules.general.GN017.IdColumn--why-not","title":"Why not?","text":"<p>The name \"id\" does not provide much information about what the column represents in the context of the table as it is so generic. Using a more descriptive name can improve clarity, readability, and maintainability of the database schema.</p>"},{"location":"rules/general/id-column/#pgrubic.rules.general.GN017.IdColumn--when-should-you","title":"When should you?","text":"<p>Almost never.</p>"},{"location":"rules/general/id-column/#pgrubic.rules.general.GN017.IdColumn--use-instead","title":"Use instead:","text":"<p>Descriptive name.</p>"},{"location":"rules/general/index-elements-more-than-three/","title":"index-elements-more-than-three (GN005)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/general/index-elements-more-than-three/#pgrubic.rules.general.GN005.IndexElementsMoreThanThree--what-it-does","title":"What it does","text":"<p>Checks for indexes with more than three elements.</p>"},{"location":"rules/general/index-elements-more-than-three/#pgrubic.rules.general.GN005.IndexElementsMoreThanThree--why-not","title":"Why not?","text":"<p>From the documentation:</p> <p>Multicolumn indexes should be used sparingly. In most situations, an index on a single column is sufficient and saves space and time. Indexes with more than three columns are unlikely to be helpful unless the usage of the table is extremely stylized.</p>"},{"location":"rules/general/index-elements-more-than-three/#pgrubic.rules.general.GN005.IndexElementsMoreThanThree--when-should-you","title":"When should you?","text":"<p>If you really need to.</p> <p>See indexes-bitmap-scans for some discussion of the merits of different index configurations.</p>"},{"location":"rules/general/index-elements-more-than-three/#pgrubic.rules.general.GN005.IndexElementsMoreThanThree--use-instead","title":"Use instead:","text":"<p>Keep your index elements at most three.</p>"},{"location":"rules/general/inline-sql-function-body-wrong-language/","title":"inline-sql-function-body-wrong-language (GN035)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/general/inline-sql-function-body-wrong-language/#pgrubic.rules.general.GN035.InlineSqlFunctionBodyWrongLanguage--what-it-does","title":"What it does","text":"<p>Checks for inline sql function bodies which are not defined with LANGUAGE SQL.</p>"},{"location":"rules/general/inline-sql-function-body-wrong-language/#pgrubic.rules.general.GN035.InlineSqlFunctionBodyWrongLanguage--why-not","title":"Why not?","text":"<p>Inline SQL function bodies are only valid for language SQL. While PostgreSQL parses such functions, they fail at creation with the error below:</p> <pre><code>ERROR:  inline SQL function body only valid for language SQL\n</code></pre>"},{"location":"rules/general/inline-sql-function-body-wrong-language/#pgrubic.rules.general.GN035.InlineSqlFunctionBodyWrongLanguage--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/general/inline-sql-function-body-wrong-language/#pgrubic.rules.general.GN035.InlineSqlFunctionBodyWrongLanguage--use-instead","title":"Use instead:","text":"<p>LANGUAGE SQL.</p>"},{"location":"rules/general/insert-without-target-columns/","title":"insert-without-target-columns (GN033)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/general/insert-without-target-columns/#pgrubic.rules.general.GN033.InsertWithoutTargetColumns--what-it-does","title":"What it does","text":"<p>Checks for insert without target columns.</p>"},{"location":"rules/general/insert-without-target-columns/#pgrubic.rules.general.GN033.InsertWithoutTargetColumns--why-not","title":"Why not?","text":"<p>Specifying the columns in a query explicitly greatly improves clarity and readability. This approach helps developers quickly grasp the purpose of a query and fosters better collaboration.</p> <p>Explicitly listing the target columns can help prevent errors</p>"},{"location":"rules/general/insert-without-target-columns/#pgrubic.rules.general.GN033.InsertWithoutTargetColumns--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/general/insert-without-target-columns/#pgrubic.rules.general.GN033.InsertWithoutTargetColumns--use-instead","title":"Use instead:","text":"<p>Specify target columns.</p>"},{"location":"rules/general/missing-primary-key/","title":"missing-primary-key (GN004)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/general/missing-primary-key/#pgrubic.rules.general.GN004.MissingPrimaryKey--what-it-does","title":"What it does","text":"<p>Checks for existence of primary keys.</p>"},{"location":"rules/general/missing-primary-key/#pgrubic.rules.general.GN004.MissingPrimaryKey--why-not","title":"Why not?","text":"<p>A primary key is a set of attributes which prevents duplicates and can uniquely identify a record.</p> <p>If you don't have one, you cannot tell records apart and you create a burden for yourself by checking for duplicate records.</p>"},{"location":"rules/general/missing-primary-key/#pgrubic.rules.general.GN004.MissingPrimaryKey--when-should-you","title":"When should you?","text":"<p>Never for OLTP databases.</p> <p>If you are doing analytics (OLAP) at scale, then primary keys may not be very useful.</p>"},{"location":"rules/general/missing-primary-key/#pgrubic.rules.general.GN004.MissingPrimaryKey--use-instead","title":"Use instead:","text":"<p>Define a primary key.</p>"},{"location":"rules/general/missing-replace-in-function/","title":"missing-replace-in-function (GN007)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/general/missing-replace-in-function/#pgrubic.rules.general.GN007.MissingReplaceInFunction--what-it-does","title":"What it does","text":"<p>Checks for replace in function creation.</p>"},{"location":"rules/general/missing-replace-in-function/#pgrubic.rules.general.GN007.MissingReplaceInFunction--why-not","title":"Why not?","text":"<p><code>CREATE OR REPLACE FUNCTION</code> simplifies the process of modifying existing functions, as you don't need to manually drop and recreate them.</p> <p>If you drop and then recreate a function, the new function is not the same entity as the old; you will have to drop existing rules, views, triggers, etc. that refer to the old function. Use CREATE OR REPLACE FUNCTION to change a function definition without breaking objects that refer to the function. It also maintains data integrity and consistency.</p>"},{"location":"rules/general/missing-replace-in-function/#pgrubic.rules.general.GN007.MissingReplaceInFunction--when-should-you","title":"When should you?","text":"<p>If you don't need to modify an existing function.</p>"},{"location":"rules/general/missing-replace-in-function/#pgrubic.rules.general.GN007.MissingReplaceInFunction--use-instead","title":"Use instead:","text":"<p>CREATE OR REPLACE FUNCTION.</p>"},{"location":"rules/general/missing-replace-in-procedure/","title":"missing-replace-in-procedure (GN008)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/general/missing-replace-in-procedure/#pgrubic.rules.general.GN008.MissingReplaceInProcedure--what-it-does","title":"What it does","text":"<p>Checks for replace in procedure creation.</p>"},{"location":"rules/general/missing-replace-in-procedure/#pgrubic.rules.general.GN008.MissingReplaceInProcedure--why-not","title":"Why not?","text":"<p><code>CREATE OR REPLACE PROCEDURE</code> simplifies the process of modifying existing procedures, as you don't need to manually drop and recreate them.</p> <p>If you drop and then recreate a procedure, the new procedure is not the same entity as the old; you will have to drop existing rules, views, triggers, etc. that refer to the old procedure. Use CREATE OR REPLACE PROCEDURE to change a procedure definition without breaking objects that refer to the procedure. It also maintains data integrity and consistency.</p>"},{"location":"rules/general/missing-replace-in-procedure/#pgrubic.rules.general.GN008.MissingReplaceInProcedure--when-should-you","title":"When should you?","text":"<p>If you don't need to modify an existing procedure.</p>"},{"location":"rules/general/missing-replace-in-procedure/#pgrubic.rules.general.GN008.MissingReplaceInProcedure--use-instead","title":"Use instead:","text":"<p>CREATE OR REPLACE PROCEDURE.</p>"},{"location":"rules/general/missing-replace-in-trigger/","title":"missing-replace-in-trigger (GN030)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/general/missing-replace-in-trigger/#pgrubic.rules.general.GN030.MissingReplaceInTrigger--what-it-does","title":"What it does","text":"<p>Checks for replace in trigger creation.</p>"},{"location":"rules/general/missing-replace-in-trigger/#pgrubic.rules.general.GN030.MissingReplaceInTrigger--why-not","title":"Why not?","text":"<p><code>CREATE OR REPLACE TRIGGER</code> simplifies the process of modifying existing functions, as you don't need to manually drop and recreate them.</p> <p>If you drop and then recreate a trigger, the new trigger is not the same entity as the old; you will have to drop existing rules, views, triggers, etc. that refer to the old trigger. Use CREATE OR REPLACE TRIGGER to change a trigger definition without breaking objects that refer to the trigger. It also maintains data integrity and consistency.</p>"},{"location":"rules/general/missing-replace-in-trigger/#pgrubic.rules.general.GN030.MissingReplaceInTrigger--when-should-you","title":"When should you?","text":"<p>If you don't need to modify an existing trigger.</p>"},{"location":"rules/general/missing-replace-in-trigger/#pgrubic.rules.general.GN030.MissingReplaceInTrigger--use-instead","title":"Use instead:","text":"<p>CREATE OR REPLACE TRIGGER.</p>"},{"location":"rules/general/missing-replace-in-view/","title":"missing-replace-in-view (GN029)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/general/missing-replace-in-view/#pgrubic.rules.general.GN029.MissingReplaceInView--what-it-does","title":"What it does","text":"<p>Checks for replace in view creation.</p>"},{"location":"rules/general/missing-replace-in-view/#pgrubic.rules.general.GN029.MissingReplaceInView--why-not","title":"Why not?","text":"<p><code>CREATE OR REPLACE VIEW</code> simplifies the process of modifying existing functions, as you don't need to manually drop and recreate them.</p> <p>If you drop and then recreate a view, the new view is not the same entity as the old; you will have to drop existing rules, views, triggers, etc. that refer to the old view. Use CREATE OR REPLACE VIEW to change a view definition without breaking objects that refer to the view. It also maintains data integrity and consistency.</p>"},{"location":"rules/general/missing-replace-in-view/#pgrubic.rules.general.GN029.MissingReplaceInView--when-should-you","title":"When should you?","text":"<p>If you don't need to modify an existing view.</p>"},{"location":"rules/general/missing-replace-in-view/#pgrubic.rules.general.GN029.MissingReplaceInView--use-instead","title":"Use instead:","text":"<p>CREATE OR REPLACE VIEW.</p>"},{"location":"rules/general/missing-required-column/","title":"missing-required-column (GN011)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/general/missing-required-column/#pgrubic.rules.general.GN011.MissingRequiredColumn--what-it-does","title":"What it does","text":"<p>Checks for missing required column.</p>"},{"location":"rules/general/missing-required-column/#pgrubic.rules.general.GN011.MissingRequiredColumn--why-not","title":"Why not?","text":"<p>If a column has been specified as required and you have not defined it, you are probably doing something wrong.</p>"},{"location":"rules/general/missing-required-column/#pgrubic.rules.general.GN011.MissingRequiredColumn--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/general/missing-required-column/#pgrubic.rules.general.GN011.MissingRequiredColumn--use-instead","title":"Use instead:","text":"<p>Define the required column.</p>"},{"location":"rules/general/missing-required-column/#pgrubic.rules.general.GN011.MissingRequiredColumn--configuration","title":"Configuration","text":"<p><code>required-columns</code>: List of required columns along with their data types.</p>"},{"location":"rules/general/multi-column-partitioning/","title":"multi-column-partitioning (GN018)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/general/multi-column-partitioning/#pgrubic.rules.general.GN018.MultiColumnPartitioning--what-it-does","title":"What it does","text":"<p>Checks for partitioning with more than one column.</p>"},{"location":"rules/general/multi-column-partitioning/#pgrubic.rules.general.GN018.MultiColumnPartitioning--why-not","title":"Why not?","text":"<p>One of the main reasons to use partitioning is the improved performance achieved by partition pruning. Pruning in a multi-column partitioned table can easily be sub-optimal, leading to scanning of unnecessary partitions.</p>"},{"location":"rules/general/multi-column-partitioning/#pgrubic.rules.general.GN018.MultiColumnPartitioning--when-should-you","title":"When should you?","text":"<p>If you know what you are doing and have a good reason to do so. Just don't use multi-column partitioning without deep consideration and knowledge of its intrinsics. An example of what could go wrong is why-isnt-postgres-multicolumn-partition-pruning-smarter-than-this</p>"},{"location":"rules/general/multi-column-partitioning/#pgrubic.rules.general.GN018.MultiColumnPartitioning--use-instead","title":"Use instead:","text":"<p>Sub-partitioning.</p>"},{"location":"rules/general/not-in/","title":"not-in (GN026)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/general/not-in/#pgrubic.rules.general.GN026.NotIn--what-it-does","title":"What it does","text":"<p>Checks for usage of NOT IN.</p>"},{"location":"rules/general/not-in/#pgrubic.rules.general.GN026.NotIn--why-not","title":"Why not?","text":"<p>Don't use NOT IN, or any combination of NOT and IN such as NOT (x IN (select\u2026))</p> <p>Two reasons:</p> <ol> <li> <p>NOT IN behaves in unexpected ways if there is a null present: <pre><code>select * from foo where col not in (1,null); -- always returns 0 rows\n</code></pre> <pre><code>select * from foo where foo.col not in (select bar.x from bar); -- returns 0 rows if\nany value of bar.x is null\n</code></pre></p> <p>This happens because col IN (1,null) returns TRUE if col=1, and NULL otherwise (i.e. it can never return FALSE). Since NOT (TRUE) is FALSE, but NOT (NULL) is still NULL, there is no way that NOT (col IN (1,null)) (which is the same thing as col NOT IN (1,null)) can return TRUE under any circumstances.</p> </li> <li> <p>Because of point 1 above, NOT IN (SELECT ...) does not optimize very well. In particular, the planner can't transform it into an anti-join, and so it becomes either a hashed Subplan or a plain Subplan. The hashed subplan is fast, but the planner only allows that plan for small result sets; the plain subplan is horrifically slow (in fact O(N\u00b2)). This means that the performance can look good in small-scale tests but then slow down by 5 or more orders of magnitude once a size threshold is crossed; you do not want this to happen.</p> </li> </ol>"},{"location":"rules/general/not-in/#pgrubic.rules.general.GN026.NotIn--when-should-you","title":"When should you?","text":"<p>NOT IN (list,of,values,...) is mostly safe unless you might have a null in the list (via a parameter or otherwise). So it's sometimes natural and even advisable to use it when excluding specific constant values from a query result.</p>"},{"location":"rules/general/not-in/#pgrubic.rules.general.GN026.NotIn--use-instead","title":"Use instead:","text":"<p>In most cases, the NULL behavior of NOT IN (SELECT \u2026) is not intentionally desired, and the query can be rewritten using NOT EXISTS (SELECT \u2026): <pre><code>select * from foo where not exists (select from bar where foo.col = bar.x);\n</code></pre></p>"},{"location":"rules/general/null-comparison/","title":"null-comparison (GN024)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/general/null-comparison/#pgrubic.rules.general.GN024.NullComparison--what-it-does","title":"What it does","text":"<p>Checks for comparison with NULL.</p>"},{"location":"rules/general/null-comparison/#pgrubic.rules.general.GN024.NullComparison--why-not","title":"Why not?","text":"<p>Comparing NULL to NULL with = returns NULL, not true. Comparing a value to NULL returns neither true nor false, but NULL.</p> <p>Do not write expression = NULL because NULL is not equal to NULL. (The null value represents an unknown value, and it is not known whether two unknown values are equal.)</p>"},{"location":"rules/general/null-comparison/#pgrubic.rules.general.GN024.NullComparison--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/general/null-comparison/#pgrubic.rules.general.GN024.NullComparison--use-instead","title":"Use instead:","text":"<p>To check whether a value is or is not null, use the predicates:</p> <ul> <li>expression IS NULL</li> <li>expression IS NOT NULL</li> </ul>"},{"location":"rules/general/null-constraint/","title":"null-constraint (GN021)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/general/null-constraint/#pgrubic.rules.general.GN021.NullConstraint--what-it-does","title":"What it does","text":"<p>Checks for use of NULL constraint.</p>"},{"location":"rules/general/null-constraint/#pgrubic.rules.general.GN021.NullConstraint--why-not","title":"Why not?","text":"<p>From the documentation:</p> <p>The NOT NULL constraint has an inverse: the NULL constraint. This does not mean that the column must be null, which would surely be useless. Instead, this simply selects the default behavior that the column might be null. The NULL constraint is not present in the SQL standard and should not be used in portable applications. (It was only added to PostgreSQL to be compatible with some other database systems.) Since it is the default for any column, its presence is simply noise.</p>"},{"location":"rules/general/null-constraint/#pgrubic.rules.general.GN021.NullConstraint--when-should-you","title":"When should you?","text":"<p>Almost Never.</p>"},{"location":"rules/general/null-constraint/#pgrubic.rules.general.GN021.NullConstraint--use-instead","title":"Use instead:","text":"<p>Leave out NULL constraints.</p>"},{"location":"rules/general/nullable-required-column/","title":"nullable-required-column (GN013)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/general/nullable-required-column/#pgrubic.rules.general.GN013.NullableRequiredColumn--what-it-does","title":"What it does","text":"<p>Checks for existence of not null constraint on required columns.</p>"},{"location":"rules/general/nullable-required-column/#pgrubic.rules.general.GN013.NullableRequiredColumn--why-not","title":"Why not?","text":"<p>If a column has been specified as required then it should not be nullable. Having a required column as nullable is an anti-pattern and should be avoided.</p>"},{"location":"rules/general/nullable-required-column/#pgrubic.rules.general.GN013.NullableRequiredColumn--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/general/nullable-required-column/#pgrubic.rules.general.GN013.NullableRequiredColumn--use-instead","title":"Use instead:","text":"<p>Set the required column as Not Null.</p>"},{"location":"rules/general/nullable-required-column/#pgrubic.rules.general.GN013.NullableRequiredColumn--configuration","title":"Configuration","text":"<p><code>required-columns</code>: List of required columns along with their data types.</p>"},{"location":"rules/general/required-column-removal/","title":"required-column-removal (GN012)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/general/required-column-removal/#pgrubic.rules.general.GN012.RequiredColumnRemoval--what-it-does","title":"What it does","text":"<p>Checks for removal of required columns.</p>"},{"location":"rules/general/required-column-removal/#pgrubic.rules.general.GN012.RequiredColumnRemoval--why-not","title":"Why not?","text":"<p>If a column has been specified as required and you are removing it from a table, you are probably doing something wrong.</p>"},{"location":"rules/general/required-column-removal/#pgrubic.rules.general.GN012.RequiredColumnRemoval--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/general/required-column-removal/#pgrubic.rules.general.GN012.RequiredColumnRemoval--use-instead","title":"Use instead:","text":"<p>Leave the required column.</p>"},{"location":"rules/general/required-column-removal/#pgrubic.rules.general.GN012.RequiredColumnRemoval--configuration","title":"Configuration","text":"<p><code>required-columns</code>: List of required columns along with their data types.</p>"},{"location":"rules/general/select-into/","title":"select-into (GN014)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/general/select-into/#pgrubic.rules.general.GN014.SelectInto--what-it-does","title":"What it does","text":"<p>Checks for usage of select into to create a new table.</p>"},{"location":"rules/general/select-into/#pgrubic.rules.general.GN014.SelectInto--why-not","title":"Why not?","text":"<p>The SQL standard uses SELECT INTO to represent selecting values into scalar variables of a host program, rather than creating a new table.</p> <p>The PostgreSQL usage of SELECT INTO to represent table creation is historical. Some other SQL implementations also use SELECT INTO in this way (but most SQL implementations support CREATE TABLE AS instead). Apart from such compatibility considerations, it is best to use CREATE TABLE AS for this purpose in new code.</p>"},{"location":"rules/general/select-into/#pgrubic.rules.general.GN014.SelectInto--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/general/select-into/#pgrubic.rules.general.GN014.SelectInto--use-instead","title":"Use instead:","text":"<p>CREATE TABLE AS.</p>"},{"location":"rules/general/sql-ascii-encoding/","title":"sql-ascii-encoding (GN003)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/general/sql-ascii-encoding/#pgrubic.rules.general.GN003.SqlAsciiEncoding--what-it-does","title":"What it does","text":"<p>Checks for SQL_ASCII encoding.</p>"},{"location":"rules/general/sql-ascii-encoding/#pgrubic.rules.general.GN003.SqlAsciiEncoding--why-not","title":"Why not?","text":"<p>SQL_ASCII means no conversions for the purpose of all encoding conversion functions. That is to say, the original bytes are simply treated as being in the new encoding, subject to validity checks, without any regard for what they mean. Unless extreme care is taken, an SQL_ASCII database will usually end up storing a mixture of many different encodings with no way to recover the original characters reliably.</p>"},{"location":"rules/general/sql-ascii-encoding/#pgrubic.rules.general.GN003.SqlAsciiEncoding--when-should-you","title":"When should you?","text":"<p>If your input data is already in a hopeless mixture of unlabelled encodings, such as IRC channel logs or non-MIME-compliant emails, then SQL_ASCII might be useful as a last resort\u2014but consider using bytea first instead, or whether you could autodetect UTF8 and assume non-UTF8 data is in some specific encoding such as WIN1252.</p>"},{"location":"rules/general/sql-ascii-encoding/#pgrubic.rules.general.GN003.SqlAsciiEncoding--use-instead","title":"Use instead:","text":"<p>UTF8</p>"},{"location":"rules/general/stringified-null/","title":"stringified-null (GN031)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/general/stringified-null/#pgrubic.rules.general.GN031.StringifiedNull--what-it-does","title":"What it does","text":"<p>Checks for stringified NULL.</p>"},{"location":"rules/general/stringified-null/#pgrubic.rules.general.GN031.StringifiedNull--why-not","title":"Why not?","text":"<p>NULL is not a data value, but a marker for an absent value, and it should not be quoted.</p> <p>Putting NULL in quotes makes it a string value, which is not the same as a NULL value.</p>"},{"location":"rules/general/stringified-null/#pgrubic.rules.general.GN031.StringifiedNull--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/general/stringified-null/#pgrubic.rules.general.GN031.StringifiedNull--use-instead","title":"Use instead:","text":"<p>Use NULL without quotes.</p>"},{"location":"rules/general/table-column-conflict/","title":"table-column-conflict (GN010)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/general/table-column-conflict/#pgrubic.rules.general.GN010.TableColumnConflict--what-it-does","title":"What it does","text":"<p>Checks for table column conflict.</p>"},{"location":"rules/general/table-column-conflict/#pgrubic.rules.general.GN010.TableColumnConflict--why-not","title":"Why not?","text":"<p>While each column in a table must have a unique name within that table to ensure unambiguous reference and avoid confusion during SQL operations, the name of a table should also be distinct from the name of its columns to avoid confusion and ensures clarity in database design and manipulation.</p>"},{"location":"rules/general/table-column-conflict/#pgrubic.rules.general.GN010.TableColumnConflict--when-should-you","title":"When should you?","text":"<p>Almost never.</p>"},{"location":"rules/general/table-column-conflict/#pgrubic.rules.general.GN010.TableColumnConflict--use-instead","title":"Use instead:","text":"<p>Resolve the name conflict.</p>"},{"location":"rules/general/table-inheritance/","title":"table-inheritance (GN001)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/general/table-inheritance/#pgrubic.rules.general.GN001.TableInheritance--what-it-does","title":"What it does","text":"<p>Checks for usage of table inheritance.</p>"},{"location":"rules/general/table-inheritance/#pgrubic.rules.general.GN001.TableInheritance--why-not","title":"Why not?","text":"<p>Table inheritance was a part of a fad wherein the database was closely coupled to object-oriented code. It turned out that coupling things that closely didn't actually produce the desired results.</p>"},{"location":"rules/general/table-inheritance/#pgrubic.rules.general.GN001.TableInheritance--when-should-you","title":"When should you?","text":"<p>Never \u2026almost. Now that table partitioning is done natively, that common use case for table inheritance has been replaced by a native feature that handles tuple routing, etc., without bespoke code. One of the very few exceptions would be temporal_tables extension if you are in a pinch and want to use that for row versioning in place of a lacking SQL 2011 support. Table inheritance will provide a small shortcut instead of using UNION ALL to get both historical as well as current rows. Even then you ought to be wary of caveats while working with parent table.</p>"},{"location":"rules/general/table-inheritance/#pgrubic.rules.general.GN001.TableInheritance--use-instead","title":"Use instead:","text":"<p>Don't use table inheritance. Use declarative partitioning.</p>"},{"location":"rules/general/typed-table/","title":"typed-table (GN034)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/general/typed-table/#pgrubic.rules.general.GN034.TypedTable--what-it-does","title":"What it does","text":"<p>Checks for typed table.</p>"},{"location":"rules/general/typed-table/#pgrubic.rules.general.GN034.TypedTable--why-not","title":"Why not?","text":"<p>A typed table takes its structure from a composite type.</p> <p>A typed table is tied to its type; for example the table will be dropped if the type is dropped (with DROP TYPE ... CASCADE).</p> <p>This creates a tight coupling between the table and its type. Any operations to be done to the columns of the typed table would have to be done through the type.</p>"},{"location":"rules/general/typed-table/#pgrubic.rules.general.GN034.TypedTable--when-should-you","title":"When should you?","text":"<p>Almost Never.</p>"},{"location":"rules/general/typed-table/#pgrubic.rules.general.GN034.TypedTable--use-instead","title":"Use instead:","text":"<p>A template table, copying the structure with LIKE.</p>"},{"location":"rules/general/unlogged-table/","title":"unlogged-table (GN019)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/general/unlogged-table/#pgrubic.rules.general.GN019.UnloggedTable--what-it-does","title":"What it does","text":"<p>Checks for use of unlogged tables.</p>"},{"location":"rules/general/unlogged-table/#pgrubic.rules.general.GN019.UnloggedTable--why-not","title":"Why not?","text":"<p>Unlogged tables are not crash-safe: an unlogged table is automatically truncated after a crash or unclean shutdown. The contents of an unlogged table are also not replicated to standby servers. Any indexes created on an unlogged table are automatically unlogged as well. Any sequences created together with the unlogged table (for identity or serial columns) are also created as unlogged.</p>"},{"location":"rules/general/unlogged-table/#pgrubic.rules.general.GN019.UnloggedTable--when-should-you","title":"When should you?","text":"<p>The table is transient and its content can be regenerated after a crash or unclean shutdown.</p>"},{"location":"rules/general/unlogged-table/#pgrubic.rules.general.GN019.UnloggedTable--use-instead","title":"Use instead:","text":"<p>Use a regular table.</p>"},{"location":"rules/general/update-without-where-clause/","title":"update-without-where-clause (GN022)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/general/update-without-where-clause/#pgrubic.rules.general.GN022.UpdateWithoutWhereClause--what-it-does","title":"What it does","text":"<p>Checks for UPDATE without a WHERE clause.</p>"},{"location":"rules/general/update-without-where-clause/#pgrubic.rules.general.GN022.UpdateWithoutWhereClause--why-not","title":"Why not?","text":"<p>Executing an UPDATE line without a WHERE clause will update all the rows in the table which is most likely an accidental mistake and not what you want.</p>"},{"location":"rules/general/update-without-where-clause/#pgrubic.rules.general.GN022.UpdateWithoutWhereClause--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/general/update-without-where-clause/#pgrubic.rules.general.GN022.UpdateWithoutWhereClause--use-instead","title":"Use instead:","text":"<p>Add necessary WHERE clause.</p>"},{"location":"rules/general/yoda-condition/","title":"yoda-condition (GN027)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/general/yoda-condition/#pgrubic.rules.general.GN027.YodaCondition--what-it-does","title":"What it does","text":"<p>Checks for yoda conditions.</p>"},{"location":"rules/general/yoda-condition/#pgrubic.rules.general.GN027.YodaCondition--why-not","title":"Why not?","text":"<p>Yoda conditions can be harder to read and understand, especially for those who are not familiar with this syntax.</p> <p>Placing the constant on the left side makes it harder for someone to quickly grasp the meaning of the condition.</p>"},{"location":"rules/general/yoda-condition/#pgrubic.rules.general.GN027.YodaCondition--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/general/yoda-condition/#pgrubic.rules.general.GN027.YodaCondition--use-instead","title":"Use instead:","text":"<p>Natural condition.</p>"},{"location":"rules/naming/date-column-without-suffix/","title":"date-column-without-suffix (NM016)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/naming/date-column-without-suffix/#pgrubic.rules.naming.NM016.DateColumnWithoutSuffix--what-it-does","title":"What it does","text":"<p>Checks that date columns are suffixed with the defined suffix, by default <code>_date</code>.</p>"},{"location":"rules/naming/date-column-without-suffix/#pgrubic.rules.naming.NM016.DateColumnWithoutSuffix--why-not","title":"Why not?","text":"<p>Adding <code>_date</code> to a date column name makes it clear that the value represents the date when something happened. For example, <code>created_date</code> indicates the date when a record was created, and <code>updated_date</code> indicates the date when a record was last updated.</p> <p>Date columns could easily be confused with other types of data if not clearly named. For example, a column named created might be unclear \u2014 does it represent a boolean flag, a date, or something else? <code>created_date</code> removes this ambiguity by specifying that it's a date.</p>"},{"location":"rules/naming/date-column-without-suffix/#pgrubic.rules.naming.NM016.DateColumnWithoutSuffix--when-should-you","title":"When should you?","text":"<p>Almost Never.</p>"},{"location":"rules/naming/date-column-without-suffix/#pgrubic.rules.naming.NM016.DateColumnWithoutSuffix--use-instead","title":"Use instead:","text":"<p>Add the defined suffix or the default <code>_date</code> to to the date column name.</p>"},{"location":"rules/naming/date-column-without-suffix/#pgrubic.rules.naming.NM016.DateColumnWithoutSuffix--configuration","title":"Configuration","text":"<p><code>date-column-suffix</code>: Specify the suffix for date columns.</p>"},{"location":"rules/naming/implicit-constraint-name/","title":"implicit-constraint-name (NM008)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/naming/implicit-constraint-name/#pgrubic.rules.naming.NM008.ImplicitConstraintName--what-it-does","title":"What it does","text":"<p>Checks that constraint is explicitly named and not relying on implicit naming.</p>"},{"location":"rules/naming/implicit-constraint-name/#pgrubic.rules.naming.NM008.ImplicitConstraintName--why-not","title":"Why not?","text":"<p>Explicitly naming a constraint is a good practice. It improves your code clarity and makes it more readable.</p> <p>A good naming convention makes your code easier to read and understand.</p>"},{"location":"rules/naming/implicit-constraint-name/#pgrubic.rules.naming.NM008.ImplicitConstraintName--when-should-you","title":"When should you?","text":"<p>Never almost.</p>"},{"location":"rules/naming/implicit-constraint-name/#pgrubic.rules.naming.NM008.ImplicitConstraintName--use-instead","title":"Use instead:","text":"<p>Name your constraint according to the set naming convention.</p>"},{"location":"rules/naming/invalid-check-constraint-name/","title":"invalid-check-constraint-name (NM005)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/naming/invalid-check-constraint-name/#pgrubic.rules.naming.NM005.InvalidCheckConstraintName--what-it-does","title":"What it does","text":"<p>Checks that the name of the check constraint to be created is valid according to naming convention.</p>"},{"location":"rules/naming/invalid-check-constraint-name/#pgrubic.rules.naming.NM005.InvalidCheckConstraintName--why-not","title":"Why not?","text":"<p>Naming conventions are crucial in database design as they offer consistency, clarity, and structure to the organization and accessibility of data within a database.</p> <p>A good naming convention makes your code easier to read and understand.</p>"},{"location":"rules/naming/invalid-check-constraint-name/#pgrubic.rules.naming.NM005.InvalidCheckConstraintName--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/naming/invalid-check-constraint-name/#pgrubic.rules.naming.NM005.InvalidCheckConstraintName--use-instead","title":"Use instead:","text":"<p>Name your check constraint according to the set name convention.</p>"},{"location":"rules/naming/invalid-check-constraint-name/#pgrubic.rules.naming.NM005.InvalidCheckConstraintName--configuration","title":"Configuration","text":"<p><code>regex-constraint-check</code>: Regex matching the naming convention for check constraints.</p>"},{"location":"rules/naming/invalid-exclusion-constraint-name/","title":"invalid-exclusion-constraint-name (NM006)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/naming/invalid-exclusion-constraint-name/#pgrubic.rules.naming.NM006.InvalidExclusionConstraintName--what-it-does","title":"What it does","text":"<p>Checks that the name of the exclusion constraint to be created is valid.</p>"},{"location":"rules/naming/invalid-exclusion-constraint-name/#pgrubic.rules.naming.NM006.InvalidExclusionConstraintName--why-not","title":"Why not?","text":"<p>Naming conventions are crucial in database design as they offer consistency, clarity, and structure to the organization and accessibility of data within a database.</p> <p>A good naming convention makes your code easier to read and understand.</p>"},{"location":"rules/naming/invalid-exclusion-constraint-name/#pgrubic.rules.naming.NM006.InvalidExclusionConstraintName--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/naming/invalid-exclusion-constraint-name/#pgrubic.rules.naming.NM006.InvalidExclusionConstraintName--use-instead","title":"Use instead:","text":"<p>Name your exclusion constraint according to the set name convention.</p>"},{"location":"rules/naming/invalid-exclusion-constraint-name/#pgrubic.rules.naming.NM006.InvalidExclusionConstraintName--configuration","title":"Configuration","text":"<p><code>regex-constraint-exclusion</code>: Regex matching the naming convention for exclusion constraints.</p>"},{"location":"rules/naming/invalid-foreign-key-name/","title":"invalid-foreign-key-name (NM004)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/naming/invalid-foreign-key-name/#pgrubic.rules.naming.NM004.InvalidForeignKeyName--what-it-does","title":"What it does","text":"<p>Checks that the name of the foreign key constraint to be created is valid according to naming convention.</p>"},{"location":"rules/naming/invalid-foreign-key-name/#pgrubic.rules.naming.NM004.InvalidForeignKeyName--why-not","title":"Why not?","text":"<p>Naming conventions are crucial in database design as they offer consistency, clarity, and structure to the organization and accessibility of data within a database.</p> <p>A good naming convention makes your code easier to read and understand.</p>"},{"location":"rules/naming/invalid-foreign-key-name/#pgrubic.rules.naming.NM004.InvalidForeignKeyName--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/naming/invalid-foreign-key-name/#pgrubic.rules.naming.NM004.InvalidForeignKeyName--use-instead","title":"Use instead:","text":"<p>Name your foreign key constraint according to the set name convention.</p>"},{"location":"rules/naming/invalid-foreign-key-name/#pgrubic.rules.naming.NM004.InvalidForeignKeyName--configuration","title":"Configuration","text":"<p><code>regex-constraint-foreign-key</code>: Regex matching the naming convention for foreign key constraints.</p>"},{"location":"rules/naming/invalid-index-name/","title":"invalid-index-name (NM001)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/naming/invalid-index-name/#pgrubic.rules.naming.NM001.InvalidIndexName--what-it-does","title":"What it does","text":"<p>Checks that the name of the index to be created is valid according to naming convention.</p>"},{"location":"rules/naming/invalid-index-name/#pgrubic.rules.naming.NM001.InvalidIndexName--why-not","title":"Why not?","text":"<p>Naming conventions are crucial in database design as they offer consistency, clarity, and structure to the organization and accessibility of data within a database.</p> <p>A good naming convention makes your code easier to read and understand.</p>"},{"location":"rules/naming/invalid-index-name/#pgrubic.rules.naming.NM001.InvalidIndexName--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/naming/invalid-index-name/#pgrubic.rules.naming.NM001.InvalidIndexName--use-instead","title":"Use instead:","text":"<p>Name your index according to the set name convention.</p>"},{"location":"rules/naming/invalid-index-name/#pgrubic.rules.naming.NM001.InvalidIndexName--configuration","title":"Configuration","text":"<p><code>regex-index</code>: Regex matching the naming convention for indexes.</p>"},{"location":"rules/naming/invalid-partition-name/","title":"invalid-partition-name (NM009)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/naming/invalid-partition-name/#pgrubic.rules.naming.NM009.InvalidPartitionName--what-it-does","title":"What it does","text":"<p>Checks that the name of the partition to be created is valid according to naming convention.</p>"},{"location":"rules/naming/invalid-partition-name/#pgrubic.rules.naming.NM009.InvalidPartitionName--why-not","title":"Why not?","text":"<p>Naming conventions are crucial in database design as they offer consistency, clarity, and structure to the organization and accessibility of data within a database.</p> <p>A good naming convention makes your code easier to read and understand.</p>"},{"location":"rules/naming/invalid-partition-name/#pgrubic.rules.naming.NM009.InvalidPartitionName--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/naming/invalid-partition-name/#pgrubic.rules.naming.NM009.InvalidPartitionName--use-instead","title":"Use instead:","text":"<p>Name your partition according to the set name convention.</p>"},{"location":"rules/naming/invalid-partition-name/#pgrubic.rules.naming.NM009.InvalidPartitionName--configuration","title":"Configuration","text":"<p><code>regex-partition</code>: Regex matching the naming convention for check partitions.</p>"},{"location":"rules/naming/invalid-primary-key-name/","title":"invalid-primary-key-name (NM002)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/naming/invalid-primary-key-name/#pgrubic.rules.naming.NM002.InvalidPrimaryKeyName--what-it-does","title":"What it does","text":"<p>Checks that the name of the primary key constraint to be created is valid according to naming convention.</p>"},{"location":"rules/naming/invalid-primary-key-name/#pgrubic.rules.naming.NM002.InvalidPrimaryKeyName--why-not","title":"Why not?","text":"<p>Naming conventions are crucial in database design as they offer consistency, clarity, and structure to the organization and accessibility of data within a database.</p> <p>A good naming convention makes your code easier to read and understand.</p>"},{"location":"rules/naming/invalid-primary-key-name/#pgrubic.rules.naming.NM002.InvalidPrimaryKeyName--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/naming/invalid-primary-key-name/#pgrubic.rules.naming.NM002.InvalidPrimaryKeyName--use-instead","title":"Use instead:","text":"<p>Name your primary key constraint according to the set name convention.</p>"},{"location":"rules/naming/invalid-primary-key-name/#pgrubic.rules.naming.NM002.InvalidPrimaryKeyName--configuration","title":"Configuration","text":"<p><code>regex-constraint-primary-key</code>: Regex matching the naming convention for primary key constraints.</p>"},{"location":"rules/naming/invalid-sequence-name/","title":"invalid-sequence-name (NM007)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/naming/invalid-sequence-name/#pgrubic.rules.naming.NM007.InvalidSequenceName--what-it-does","title":"What it does","text":"<p>Checks that the name of the sequence to be created is valid according to naming convention.</p>"},{"location":"rules/naming/invalid-sequence-name/#pgrubic.rules.naming.NM007.InvalidSequenceName--why-not","title":"Why not?","text":"<p>Naming conventions are crucial in database design as they offer consistency, clarity, and structure to the organization and accessibility of data within a database.</p> <p>A good naming convention makes your code easier to read and understand.</p>"},{"location":"rules/naming/invalid-sequence-name/#pgrubic.rules.naming.NM007.InvalidSequenceName--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/naming/invalid-sequence-name/#pgrubic.rules.naming.NM007.InvalidSequenceName--use-instead","title":"Use instead:","text":"<p>Name your sequence according to the set name convention.</p>"},{"location":"rules/naming/invalid-sequence-name/#pgrubic.rules.naming.NM007.InvalidSequenceName--configuration","title":"Configuration","text":"<p><code>regex-sequence</code>: Regex matching the naming convention for sequences.</p>"},{"location":"rules/naming/invalid-unique-key-name/","title":"invalid-unique-key-name (NM003)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/naming/invalid-unique-key-name/#pgrubic.rules.naming.NM003.InvalidUniqueKeyName--what-it-does","title":"What it does","text":"<p>Checks that the name of the unique key constraint to be created is valid according to naming convention.</p>"},{"location":"rules/naming/invalid-unique-key-name/#pgrubic.rules.naming.NM003.InvalidUniqueKeyName--why-not","title":"Why not?","text":"<p>Naming conventions are crucial in database design as they offer consistency, clarity, and structure to the organization and accessibility of data within a database.</p> <p>A good naming convention makes your code easier to read and understand.</p>"},{"location":"rules/naming/invalid-unique-key-name/#pgrubic.rules.naming.NM003.InvalidUniqueKeyName--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/naming/invalid-unique-key-name/#pgrubic.rules.naming.NM003.InvalidUniqueKeyName--use-instead","title":"Use instead:","text":"<p>Name your unique key constraint according to the set name convention.</p>"},{"location":"rules/naming/invalid-unique-key-name/#pgrubic.rules.naming.NM003.InvalidUniqueKeyName--configuration","title":"Configuration","text":"<p><code>regex-constraint-unique-key</code>: Regex matching the naming convention for unique key constraints.</p>"},{"location":"rules/naming/keyword-identifier/","title":"keyword-identifier (NM011)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/naming/keyword-identifier/#pgrubic.rules.naming.NM011.KeywordIdentifier--what-it-does","title":"What it does","text":"<p>Checks for keywords used as identifiers.</p>"},{"location":"rules/naming/keyword-identifier/#pgrubic.rules.naming.NM011.KeywordIdentifier--why-not","title":"Why not?","text":"<p>According to the standard, reserved key words are the only real key words; they are never allowed as identifiers. Non-reserved key words only have a special meaning in particular contexts and can be used as identifiers in other contexts.</p> <p>PostgreSQL won't allow reserved keywords as identifiers without double quotes. This means that if you use reserved keywords as identifiers, you have to always double quote them. That is annoying enough by hand and error-prone.</p> <p>Eventhough, non-reserved keywords can be used as identifiers in certain contexts, it can be confusing and ambiguious. Also, there is nothing stopping non-reserved keywords from becoming reserved keywords in the future. So, it is best to avoid them altogether.</p>"},{"location":"rules/naming/keyword-identifier/#pgrubic.rules.naming.NM011.KeywordIdentifier--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/naming/keyword-identifier/#pgrubic.rules.naming.NM011.KeywordIdentifier--use-instead","title":"Use instead:","text":"<p>Choose a name that is not a keyword.</p>"},{"location":"rules/naming/non-snake-case-identifier/","title":"non-snake-case-identifier (NM010)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/naming/non-snake-case-identifier/#pgrubic.rules.naming.NM010.NonSnakeCaseIdentifier--what-it-does","title":"What it does","text":"<p>Check if identifier is not in snake case.</p>"},{"location":"rules/naming/non-snake-case-identifier/#pgrubic.rules.naming.NM010.NonSnakeCaseIdentifier--why-not","title":"Why not?","text":"<p>PostgreSQL folds all names - of tables, columns, functions and everything else - to lower case unless they're \"double quoted\". So <code>create table Foo()</code> will create a table called foo, while <code>create table \"Bar\"()</code> will create a table called Bar.</p> <p>These select commands will work: <code>select * from Foo</code>, <code>select * from foo</code>, <code>select * from \"Bar\"</code>.</p> <p>These will fail with \"no such table\": <code>select * from \"Foo\"</code>, <code>select * from Bar</code>, <code>select * from bar</code>.</p> <p>This means that if you use uppercase characters in your table or column names you have to either always double quote them or never double quote them. That's annoying enough by hand, but when you start using other tools to access the database, some of which always quote all names and some don't, it gets very confusing.</p>"},{"location":"rules/naming/non-snake-case-identifier/#pgrubic.rules.naming.NM010.NonSnakeCaseIdentifier--when-should-you","title":"When should you?","text":"<p>Never ... almost. If it is important that \"pretty\" names are displaying in report output then you might want to use them. But you can also use column aliases to use lower case names in a table and still get pretty names in the output of a query:</p> <p>select character_name as \"Character Name\" from foo.</p>"},{"location":"rules/naming/non-snake-case-identifier/#pgrubic.rules.naming.NM010.NonSnakeCaseIdentifier--use-instead","title":"Use instead:","text":"<p>Stick to using a-z, 0-9 and underscore for names and you never have to worry about quoting them.</p>"},{"location":"rules/naming/pg-prefix-identifier/","title":"pg-prefix-identifier (NM013)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/naming/pg-prefix-identifier/#pgrubic.rules.naming.NM013.PgPrefixIdentifier--what-it-does","title":"What it does","text":"<p>Checks for identifiers prefix with pg_.</p>"},{"location":"rules/naming/pg-prefix-identifier/#pgrubic.rules.naming.NM013.PgPrefixIdentifier--why-not","title":"Why not?","text":"<p>From the documentation:</p> <p>Schema names beginning with pg_ are reserved for system purposes and cannot be created by users.</p> <p>Since system table names begin with pg_, it is best to avoid such names to ensure that you won't suffer a conflict if some future version defines a system table named the same as your table. (With the default search path, an unqualified reference to your table name would then be resolved as the system table instead.) System tables will continue to follow the convention of having names beginning with pg_, so that they will not conflict with unqualified user-table names so long as users avoid the pg_ prefix.</p> <p>Same thing applies to other objects such as functions, views, sequences etc.</p>"},{"location":"rules/naming/pg-prefix-identifier/#pgrubic.rules.naming.NM013.PgPrefixIdentifier--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/naming/pg-prefix-identifier/#pgrubic.rules.naming.NM013.PgPrefixIdentifier--use-instead","title":"Use instead:","text":"<p>Remove prefix pg_ from identifier.</p>"},{"location":"rules/naming/single-letter-identifier/","title":"single-letter-identifier (NM014)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/naming/single-letter-identifier/#pgrubic.rules.naming.NM014.SingleLetterIdentifier--what-it-does","title":"What it does","text":"<p>Checks for usage of single letter identifiers.</p>"},{"location":"rules/naming/single-letter-identifier/#pgrubic.rules.naming.NM014.SingleLetterIdentifier--why-not","title":"Why not?","text":"<p>Single letter identifier does not provide much information about what the identifier represents. Using a more descriptive name can improve clarity, readability, and maintainability of the database schema.</p>"},{"location":"rules/naming/single-letter-identifier/#pgrubic.rules.naming.NM014.SingleLetterIdentifier--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/naming/single-letter-identifier/#pgrubic.rules.naming.NM014.SingleLetterIdentifier--use-instead","title":"Use instead:","text":"<p>Descriptive name.</p>"},{"location":"rules/naming/special-character-in-identifier/","title":"special-character-in-identifier (NM012)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/naming/special-character-in-identifier/#pgrubic.rules.naming.NM012.SpecialCharacterInIdentifier--what-it-does","title":"What it does","text":"<p>Checks for identifiers with special characters.</p>"},{"location":"rules/naming/special-character-in-identifier/#pgrubic.rules.naming.NM012.SpecialCharacterInIdentifier--why-not","title":"Why not?","text":"<p>SQL identifiers must begin with a letter (a-z) or an underscore (_). Subsequent characters in a name can be letters, digits (0-9), or underscores.</p> <p>PostgreSQL won't allow special characters in identifiers without double quotes. This means that if you use special characters in identifiers, you have to always double quote them. That is annoying enough by hand and error-prone.</p>"},{"location":"rules/naming/special-character-in-identifier/#pgrubic.rules.naming.NM012.SpecialCharacterInIdentifier--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/naming/special-character-in-identifier/#pgrubic.rules.naming.NM012.SpecialCharacterInIdentifier--use-instead","title":"Use instead:","text":"<p>Remove special characters from the identifier.</p>"},{"location":"rules/naming/timestamp-column-without-suffix/","title":"timestamp-column-without-suffix (NM015)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/naming/timestamp-column-without-suffix/#pgrubic.rules.naming.NM015.TimestampColumnWithoutSuffix--what-it-does","title":"What it does","text":"<p>Checks that timestamp columns are suffixed with the defined suffix, by default <code>_at</code>.</p>"},{"location":"rules/naming/timestamp-column-without-suffix/#pgrubic.rules.naming.NM015.TimestampColumnWithoutSuffix--why-not","title":"Why not?","text":"<p>Adding <code>_at</code> to a timestamp column name makes it clear that the value represents the time when something happened. For example, <code>created_at</code> indicates the time when a record was created, and <code>updated_at</code> indicates the time when a record was last updated.</p> <p>Timestamp columns could easily be confused with other types of data if not clearly named. For example, a column named created might be unclear \u2014 does it represent a boolean flag, a date, or something else? <code>created_at</code> removes this ambiguity by specifying that it's a timestamp.</p>"},{"location":"rules/naming/timestamp-column-without-suffix/#pgrubic.rules.naming.NM015.TimestampColumnWithoutSuffix--when-should-you","title":"When should you?","text":"<p>Almost Never.</p>"},{"location":"rules/naming/timestamp-column-without-suffix/#pgrubic.rules.naming.NM015.TimestampColumnWithoutSuffix--use-instead","title":"Use instead:","text":"<p>Add the defined suffix or the default <code>_at</code> to to the timestamp column name.</p>"},{"location":"rules/naming/timestamp-column-without-suffix/#pgrubic.rules.naming.NM015.TimestampColumnWithoutSuffix--configuration","title":"Configuration","text":"<p><code>timestamp-column-suffix</code>: Specify the suffix for timestamp columns.</p>"},{"location":"rules/query/ordinal-number-group-by/","title":"ordinal-number-group-by (QY001)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/query/ordinal-number-group-by/#pgrubic.rules.query.QY001.OrdinalNumberGroupBy--what-it-does","title":"What it does","text":"<p>Checks that GROUP BY does not use numeric ordinals (e.g., GROUP BY 1).</p>"},{"location":"rules/query/ordinal-number-group-by/#pgrubic.rules.query.QY001.OrdinalNumberGroupBy--why-not","title":"Why not?","text":"<p>Using ordinals reduces readability, makes queries fragile when the SELECT list changes, and obscures intent.</p>"},{"location":"rules/query/ordinal-number-group-by/#pgrubic.rules.query.QY001.OrdinalNumberGroupBy--when-should-you","title":"When should you?","text":"<p>Almost never.</p>"},{"location":"rules/query/ordinal-number-group-by/#pgrubic.rules.query.QY001.OrdinalNumberGroupBy--use-instead","title":"Use instead:","text":"<p>Explicit column names or expressions.</p>"},{"location":"rules/query/ordinal-number-order-by/","title":"ordinal-number-order-by (QY002)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/query/ordinal-number-order-by/#pgrubic.rules.query.QY002.OrdinalNumberOrderBy--what-it-does","title":"What it does","text":"<p>Checks that ORDER BY does not use numeric ordinals (e.g., ORDER BY 1).</p>"},{"location":"rules/query/ordinal-number-order-by/#pgrubic.rules.query.QY002.OrdinalNumberOrderBy--why-not","title":"Why not?","text":"<p>Using ordinals reduces readability, makes queries fragile when the SELECT list changes, and obscures intent.</p>"},{"location":"rules/query/ordinal-number-order-by/#pgrubic.rules.query.QY002.OrdinalNumberOrderBy--when-should-you","title":"When should you?","text":"<p>Almost never.</p>"},{"location":"rules/query/ordinal-number-order-by/#pgrubic.rules.query.QY002.OrdinalNumberOrderBy--use-instead","title":"Use instead:","text":"<p>Explicit column names or expressions.</p>"},{"location":"rules/schema/disallowed-schema/","title":"disallowed-schema (SM002)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/schema/disallowed-schema/#pgrubic.rules.schema.SM002.DisallowedSchema--what-it-does","title":"What it does","text":"<p>Checks for usage of disallowed schemas.</p>"},{"location":"rules/schema/disallowed-schema/#pgrubic.rules.schema.SM002.DisallowedSchema--why-not","title":"Why not?","text":"<p>If a schema has been included in the disallowed_schemas config, it is not allowed.</p>"},{"location":"rules/schema/disallowed-schema/#pgrubic.rules.schema.SM002.DisallowedSchema--when-should-you","title":"When should you?","text":"<p>Do you really want to use a disallowed schema?</p>"},{"location":"rules/schema/disallowed-schema/#pgrubic.rules.schema.SM002.DisallowedSchema--use-instead","title":"Use instead:","text":"<p>Allowed schemas.</p>"},{"location":"rules/schema/disallowed-schema/#pgrubic.rules.schema.SM002.DisallowedSchema--configuration","title":"Configuration","text":"<p><code>disallowed-schemas</code>: List of disallowed schemas.</p>"},{"location":"rules/schema/schema-unqualified-object/","title":"schema-unqualified-object (SM001)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/schema/schema-unqualified-object/#pgrubic.rules.schema.SM001.SchemaUnqualifiedObject--what-it-does","title":"What it does","text":"<p>Checks for objects that are schema-qualifiable but are not schema qualified.</p> <p>We currently do not check subqueries.</p>"},{"location":"rules/schema/schema-unqualified-object/#pgrubic.rules.schema.SM001.SchemaUnqualifiedObject--why-not","title":"Why not?","text":"<p>Explicitly specifying schema improves code readability and improves clarity.</p>"},{"location":"rules/schema/schema-unqualified-object/#pgrubic.rules.schema.SM001.SchemaUnqualifiedObject--when-should-you","title":"When should you?","text":"<p>If you really do not want to specify schema.</p>"},{"location":"rules/schema/schema-unqualified-object/#pgrubic.rules.schema.SM001.SchemaUnqualifiedObject--use-instead","title":"Use instead:","text":"<p>Specify schema.</p>"},{"location":"rules/security/extension-whitelist/","title":"extension-whitelist (ST001)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/security/extension-whitelist/#pgrubic.rules.security.ST001.ExtensionWhitelist--what-it-does","title":"What it does","text":"<p>Checks that an extension to be created is allowed.</p>"},{"location":"rules/security/extension-whitelist/#pgrubic.rules.security.ST001.ExtensionWhitelist--why-not","title":"Why not?","text":"<p>By default, any extension can be loaded into the database. This is quite dangerous as any bug causing a crash would mean a PostgreSQL would restart. So you not only want to empower CREATE EXTENSION to database owners, you also want to be able to review and explicitly allow extensions.</p>"},{"location":"rules/security/extension-whitelist/#pgrubic.rules.security.ST001.ExtensionWhitelist--when-should-you","title":"When should you?","text":"<p>Almost never. If an extension is not allowed, you are probably doing something wrong.</p>"},{"location":"rules/security/extension-whitelist/#pgrubic.rules.security.ST001.ExtensionWhitelist--use-instead","title":"Use instead:","text":"<p>Extensions that are allowed.</p>"},{"location":"rules/security/extension-whitelist/#pgrubic.rules.security.ST001.ExtensionWhitelist--configuration","title":"Configuration","text":"<p><code>allowed-extensions</code>: List of allowed extensions.</p>"},{"location":"rules/security/procedural-language-whitelist/","title":"procedural-language-whitelist (ST002)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/security/procedural-language-whitelist/#pgrubic.rules.security.ST002.ProceduralLanguageWhitelist--what-it-does","title":"What it does","text":"<p>Checks that a procedural language to be created is allowed.</p>"},{"location":"rules/security/procedural-language-whitelist/#pgrubic.rules.security.ST002.ProceduralLanguageWhitelist--why-not","title":"Why not?","text":"<p>By default, any procedural language can be loaded into the database. This is quite dangerous as some unsafe operations might be introduced by languages. So you not only want to empower CREATE LANGUAGE to database owners, you also want to be able to review and explicitly allow procedural languages.</p>"},{"location":"rules/security/procedural-language-whitelist/#pgrubic.rules.security.ST002.ProceduralLanguageWhitelist--when-should-you","title":"When should you?","text":"<p>Almost never. If a procedural language is not allowed, you are probably doing something wrong.</p>"},{"location":"rules/security/procedural-language-whitelist/#pgrubic.rules.security.ST002.ProceduralLanguageWhitelist--use-instead","title":"Use instead:","text":"<p>Procedural languages that are allowed.</p>"},{"location":"rules/security/procedural-language-whitelist/#pgrubic.rules.security.ST002.ProceduralLanguageWhitelist--configuration","title":"Configuration","text":"<p><code>allowed-languages</code>: List of allowed languages.</p>"},{"location":"rules/security/security-definer-function-no-explicit-search-path/","title":"security-definer-function-no-explicit-search-path (ST003)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/security/security-definer-function-no-explicit-search-path/#pgrubic.rules.security.ST003.SecurityDefinerFunctionNoExplicitSearchPath--what-it-does","title":"What it does","text":"<p>Checks that a security definer function has explicit search path.</p>"},{"location":"rules/security/security-definer-function-no-explicit-search-path/#pgrubic.rules.security.ST003.SecurityDefinerFunctionNoExplicitSearchPath--why-not","title":"Why not?","text":"<p>Because a SECURITY DEFINER function is executed with the privileges of the user that owns it, care is needed to ensure that the function cannot be misused. For security, search_path should be set to exclude any schemas writable by untrusted users. This prevents malicious users from creating objects (e.g., tables, functions, and operators) that mask objects intended to be used by the function.</p>"},{"location":"rules/security/security-definer-function-no-explicit-search-path/#pgrubic.rules.security.ST003.SecurityDefinerFunctionNoExplicitSearchPath--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/security/security-definer-function-no-explicit-search-path/#pgrubic.rules.security.ST003.SecurityDefinerFunctionNoExplicitSearchPath--use-instead","title":"Use instead:","text":"<p>Set an explicit search_path on SECURITY DEFINER functions.</p>"},{"location":"rules/security/security-definer-function-non-temp-schema/","title":"security-definer-function-non-temp-schema (ST005)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/security/security-definer-function-non-temp-schema/#pgrubic.rules.security.ST005.SecurityDefinerFunctionNonTempSchema--what-it-does","title":"What it does","text":"<p>Checks that a security definer function has non-temporary schema in the search path.</p>"},{"location":"rules/security/security-definer-function-non-temp-schema/#pgrubic.rules.security.ST005.SecurityDefinerFunctionNonTempSchema--why-not","title":"Why not?","text":"<p>Because a SECURITY DEFINER function is executed with the privileges of the user that owns it, care is needed to ensure that the function cannot be misused. For security, search_path should be set to exclude any schemas writable by untrusted users. This prevents malicious users from creating objects (e.g., tables, functions, and operators) that mask objects intended to be used by the function. A secure arrangement can be obtained by forcing the temporary schema to be searched last. To do this, write pg_temp as the last entry in search_path.</p>"},{"location":"rules/security/security-definer-function-non-temp-schema/#pgrubic.rules.security.ST005.SecurityDefinerFunctionNonTempSchema--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/security/security-definer-function-non-temp-schema/#pgrubic.rules.security.ST005.SecurityDefinerFunctionNonTempSchema--use-instead","title":"Use instead:","text":"<p>Include non-temporary schema in the search_path of a SECURITY DEFINER functions.</p>"},{"location":"rules/security/security-definer-function-temp-schema-order/","title":"security-definer-function-temp-schema-order (ST004)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/security/security-definer-function-temp-schema-order/#pgrubic.rules.security.ST004.SecurityDefinerFunctionTempSchemaOrder--what-it-does","title":"What it does","text":"<p>Checks that a security definer function has pg_temp as the last entry in the search path.</p>"},{"location":"rules/security/security-definer-function-temp-schema-order/#pgrubic.rules.security.ST004.SecurityDefinerFunctionTempSchemaOrder--why-not","title":"Why not?","text":"<p>Because a SECURITY DEFINER function is executed with the privileges of the user that owns it, care is needed to ensure that the function cannot be misused. For security, search_path should be set to exclude any schemas writable by untrusted users. This prevents malicious users from creating objects (e.g., tables, functions, and operators) that mask objects intended to be used by the function. A secure arrangement can be obtained by forcing the temporary schema to be searched last. To do this, write pg_temp as the last entry in search_path.</p>"},{"location":"rules/security/security-definer-function-temp-schema-order/#pgrubic.rules.security.ST004.SecurityDefinerFunctionTempSchemaOrder--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/security/security-definer-function-temp-schema-order/#pgrubic.rules.security.ST004.SecurityDefinerFunctionTempSchemaOrder--use-instead","title":"Use instead:","text":"<p>Include pg_temp as the last entry in the search_path of SECURITY DEFINER functions.</p>"},{"location":"rules/typing/char/","title":"char (TP004)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/typing/char/#pgrubic.rules.typing.TP004.Char--what-it-does","title":"What it does","text":"<p>Checks for usage of char.</p>"},{"location":"rules/typing/char/#pgrubic.rules.typing.TP004.Char--why-not","title":"Why not?","text":"<p>Any string you insert into a char(n) field will be padded with spaces to the declared width. That's probably not what you actually want.</p> <p>The manual says:</p> <p>Values of type character are physically padded with spaces to the specified width n, and are stored and displayed that way. However, trailing spaces are treated as semantically insignificant and disregarded when comparing two values of type character. In collations where whitespace is significant, this behavior can produce unexpected results; for example SELECT 'a '::CHAR(2) collate \"C\" &lt; E'a\\n'::CHAR(2) returns true, even though C locale would consider a space to be greater than a newline. Trailing spaces are removed when converting a character value to one of the other string types. Note that trailing spaces are semantically significant in character varying and text values, and when using pattern matching, that is LIKE and regular expressions. That should scare you off it.</p> <p>The space-padding does waste space, but doesn't make operations on it any faster; in fact the reverse, thanks to the need to strip spaces in many contexts.</p> <p>It's important to note that from a storage point of view char(n) is not a fixed-width type. The actual number of bytes varies since characters may take more than one byte, and the stored values are therefore treated as variable-length anyway (even though the space padding is included in the storage).</p> <p>Sometimes people respond to \"don't use char(n)\" with \"but my values must always be exactly N characters long\" (e.g. country codes, hashes, or identifiers from some other system). It is still a bad idea to use char(n) even in these cases.</p> <p>Remember, there is no performance benefit whatsoever to using char(n). In fact the reverse is true. One particular problem that comes up is that if you try and compare a char(n) field against a parameter where the driver has explicitly specified a type of text or varchar, you may be unexpectedly unable to use an index for the comparison. This can be hard to debug since it doesn't show up on manual queries.</p>"},{"location":"rules/typing/char/#pgrubic.rules.typing.TP004.Char--when-should-you","title":"When should you?","text":"<p>When you're porting very, very old software that uses fixed width fields. Or when you read the snippet from the manual above and think \"yes, that makes perfect sense and is a good match for my requirements\" rather than gibbering and running away.</p>"},{"location":"rules/typing/char/#pgrubic.rules.typing.TP004.Char--use-instead","title":"Use instead:","text":"<ol> <li>text</li> <li>text with a constraint that enforces a maximum string length</li> </ol>"},{"location":"rules/typing/disallowed-data-type/","title":"disallowed-data-type (TP014)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/typing/disallowed-data-type/#pgrubic.rules.typing.TP014.DisallowedDataType--what-it-does","title":"What it does","text":"<p>Checks for usage of disallowed data types.</p>"},{"location":"rules/typing/disallowed-data-type/#pgrubic.rules.typing.TP014.DisallowedDataType--why-not","title":"Why not?","text":"<p>If you are using a disallowed type, you're probably doing something wrong.</p>"},{"location":"rules/typing/disallowed-data-type/#pgrubic.rules.typing.TP014.DisallowedDataType--when-should-you","title":"When should you?","text":"<p>Never. If a data type is intended to be used, it should not be in the config disallowed_data_types.</p>"},{"location":"rules/typing/disallowed-data-type/#pgrubic.rules.typing.TP014.DisallowedDataType--use-instead","title":"Use instead:","text":"<p>Allowed data types.</p>"},{"location":"rules/typing/disallowed-data-type/#pgrubic.rules.typing.TP014.DisallowedDataType--configuration","title":"Configuration","text":"<p><code>disallowed_data_types</code>: List of disallowed data types.</p>"},{"location":"rules/typing/float/","title":"float (TP011)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/typing/float/#pgrubic.rules.typing.TP011.Float--what-it-does","title":"What it does","text":"<p>Checks for usage of float types.</p>"},{"location":"rules/typing/float/#pgrubic.rules.typing.TP011.Float--why-not","title":"Why not?","text":"<p>Floating point types are inexact, variable-precision numeric types. Inexact means that some values cannot be converted exactly to the internal format and are stored as approximations, so that storing and retrieving a value might show slight discrepancies.</p> <p>Comparing two floating-point values for equality might not always work as expected.</p>"},{"location":"rules/typing/float/#pgrubic.rules.typing.TP011.Float--when-should-you","title":"When should you?","text":"<p>When approximates are acceptable, no comparison for equality is needed.</p>"},{"location":"rules/typing/float/#pgrubic.rules.typing.TP011.Float--use-instead","title":"Use instead:","text":"<ol> <li>numeric</li> <li>decimal</li> </ol>"},{"location":"rules/typing/hstore/","title":"hstore (TP013)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/typing/hstore/#pgrubic.rules.typing.TP013.Hstore--what-it-does","title":"What it does","text":"<p>Checks for usage of hstore.</p>"},{"location":"rules/typing/hstore/#pgrubic.rules.typing.TP013.Hstore--why-not","title":"Why not?","text":"<p>Hstore is essentially a key/value store directly in Postgres. With hstore you are a little more limited in terms of the datatypes you have: you essentially just get strings. You also don't get any nesting; in short it's a flat key/value datatype.</p>"},{"location":"rules/typing/hstore/#pgrubic.rules.typing.TP013.Hstore--when-should-you","title":"When should you?","text":"<p>Hstore can work fine for text based key-value lookups, but in general JSONB can still work great here.</p>"},{"location":"rules/typing/hstore/#pgrubic.rules.typing.TP013.Hstore--use-instead","title":"Use instead:","text":"<p>jsonb.</p>"},{"location":"rules/typing/integer/","title":"integer (TP009)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/typing/integer/#pgrubic.rules.typing.TP009.Integer--what-it-does","title":"What it does","text":"<p>Checks for usage of integer.</p>"},{"location":"rules/typing/integer/#pgrubic.rules.typing.TP009.Integer--why-not","title":"Why not?","text":"<p>Integer can store values up to 2.147 Billion which can lead to integer overflow once the max value is reached. The fire drill when you run out of integers is not cheap.</p>"},{"location":"rules/typing/integer/#pgrubic.rules.typing.TP009.Integer--when-should-you","title":"When should you?","text":"<p>Tables that store limited lookup options.</p>"},{"location":"rules/typing/integer/#pgrubic.rules.typing.TP009.Integer--use-instead","title":"Use instead:","text":"<p>bigint.</p>"},{"location":"rules/typing/json/","title":"json (TP008)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/typing/json/#pgrubic.rules.typing.TP008.Json--what-it-does","title":"What it does","text":"<p>Checks for usage of json.</p>"},{"location":"rules/typing/json/#pgrubic.rules.typing.TP008.Json--why-not","title":"Why not?","text":"<p>From the manual:</p> <p>The json and jsonb data types accept almost identical sets of values as input. The major practical difference is one of efficiency. The json data type stores an exact copy of the input text, which processing functions must reparse on each execution; while jsonb data is stored in a decomposed binary format that makes it slightly slower to input due to added conversion overhead, but significantly faster to process, since no reparsing is needed. jsonb also supports indexing, which can be a significant advantage.</p>"},{"location":"rules/typing/json/#pgrubic.rules.typing.TP008.Json--when-should-you","title":"When should you?","text":"<p>In general, most applications should prefer to store JSON data as jsonb, unless there are quite specialized needs, such as legacy assumptions about ordering of object keys.</p>"},{"location":"rules/typing/json/#pgrubic.rules.typing.TP008.Json--use-instead","title":"Use instead:","text":"<p>jsonb.</p>"},{"location":"rules/typing/money/","title":"money (TP006)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/typing/money/#pgrubic.rules.typing.TP006.Money--what-it-does","title":"What it does","text":"<p>Checks for usage of money.</p>"},{"location":"rules/typing/money/#pgrubic.rules.typing.TP006.Money--why-not","title":"Why not?","text":"<p>It's a fixed-point type, implemented as a machine int, so arithmetic with it is fast. But it doesn't handle fractions of a cent (or equivalents in other currencies), it's rounding behaviour is probably not what you want.</p> <p>It doesn't store a currency with the value, rather assuming that all money columns contain the currency specified by the database's lc_monetary locale setting. If you change the lc_monetary setting for any reason, all money columns will contain the wrong value. That means that if you insert '$10.00' while lc_monetary is set to 'en_US.UTF-8' the value you retrieve may be '10,00 Lei' or '\u00a51,000' if lc_monetary is changed.</p> <p>Storing a value as a numeric, possibly with the currency being used in an adjacent column, might be better.</p>"},{"location":"rules/typing/money/#pgrubic.rules.typing.TP006.Money--when-should-you","title":"When should you?","text":"<p>If you're only working in a single currency, aren't dealing with fractional cents and are only doing addition and subtraction then money might be the right thing.</p>"},{"location":"rules/typing/money/#pgrubic.rules.typing.TP006.Money--use-instead","title":"Use instead:","text":"<p>numeric</p>"},{"location":"rules/typing/nullable-boolean-field/","title":"nullable-boolean-field (TP017)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/typing/nullable-boolean-field/#pgrubic.rules.typing.TP017.NullableBooleanField--what-it-does","title":"What it does","text":"<p>Checks for nullable boolean fields.</p>"},{"location":"rules/typing/nullable-boolean-field/#pgrubic.rules.typing.TP017.NullableBooleanField--why-not","title":"Why not?","text":"<p>3 possible values is not a boolean. By allowing nulls in a boolean field, you are turning an intended binary representation (true/false) into a ternary representation (true, false, null). Null is neither 'true' nor 'false'. Allowing nulls in a boolean field is an oversight that leads to unnecessarily ambiguous data.</p>"},{"location":"rules/typing/nullable-boolean-field/#pgrubic.rules.typing.TP017.NullableBooleanField--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/typing/nullable-boolean-field/#pgrubic.rules.typing.TP017.NullableBooleanField--use-instead","title":"Use instead:","text":"<p>boolean with not null constraint.</p>"},{"location":"rules/typing/numeric-with-precision/","title":"numeric-with-precision (TP016)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/typing/numeric-with-precision/#pgrubic.rules.typing.TP016.NumericWithPrecision--what-it-does","title":"What it does","text":"<p>Checks for usage of numeric with precision.</p>"},{"location":"rules/typing/numeric-with-precision/#pgrubic.rules.typing.TP016.NumericWithPrecision--why-not","title":"Why not?","text":"<p>Because it rounds off the fractional part which can lead to rounding errors slipping in when performing calculations and storing partial results before aggregation. An example of what could go wrong is how-to-prevent-postgresql-from-automatically-rounding-numeric-types</p>"},{"location":"rules/typing/numeric-with-precision/#pgrubic.rules.typing.TP016.NumericWithPrecision--when-should-you","title":"When should you?","text":"<p>When you want to, really. If what you want is a numeric field that will throw an error when you insert too large a value into it, and you do not want to use an explicit check constraint and you always want to store the fractional part in a specific decimal places then numeric(p, s) is a perfectly good type. Just don't use it automatically without thinking about it.</p>"},{"location":"rules/typing/numeric-with-precision/#pgrubic.rules.typing.TP016.NumericWithPrecision--use-instead","title":"Use instead:","text":"<p>numeric.</p>"},{"location":"rules/typing/serial/","title":"serial (TP007)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/typing/serial/#pgrubic.rules.typing.TP007.Serial--what-it-does","title":"What it does","text":"<p>Checks for usage of serial types.</p>"},{"location":"rules/typing/serial/#pgrubic.rules.typing.TP007.Serial--why-not","title":"Why not?","text":"<p>The serial types have some weird behaviors that make schema, dependency, and permission management unnecessarily cumbersome.</p>"},{"location":"rules/typing/serial/#pgrubic.rules.typing.TP007.Serial--when-should-you","title":"When should you?","text":"<ul> <li>If you need support to PostgreSQL older than version 10.</li> <li>In certain combinations with table inheritance (but see there)</li> <li>More generally, if you somehow use the same sequence for multiple tables, although   in those cases an explicit declaration might be preferable over the serial types.</li> </ul>"},{"location":"rules/typing/serial/#pgrubic.rules.typing.TP007.Serial--use-instead","title":"Use instead:","text":"<p>For new applications, identity columns should be used.</p>"},{"location":"rules/typing/smallint/","title":"smallint (TP010)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/typing/smallint/#pgrubic.rules.typing.TP010.Smallint--what-it-does","title":"What it does","text":"<p>Checks for usage of smallint.</p>"},{"location":"rules/typing/smallint/#pgrubic.rules.typing.TP010.Smallint--why-not","title":"Why not?","text":"<p>Smallint can store values up to 32767 which can lead to integer overflow once the max value is reached. The fire drill when you run out of integers is not cheap.</p>"},{"location":"rules/typing/smallint/#pgrubic.rules.typing.TP010.Smallint--when-should-you","title":"When should you?","text":"<p>Tables that store limited lookup options.</p>"},{"location":"rules/typing/smallint/#pgrubic.rules.typing.TP010.Smallint--use-instead","title":"Use instead:","text":"<p>bigint.</p>"},{"location":"rules/typing/time-with-time-zone/","title":"time-with-time-zone (TP002)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/typing/time-with-time-zone/#pgrubic.rules.typing.TP002.TimeWithTimeZone--what-it-does","title":"What it does","text":"<p>Checks for usage of time with time zone.</p>"},{"location":"rules/typing/time-with-time-zone/#pgrubic.rules.typing.TP002.TimeWithTimeZone--why-not","title":"Why not?","text":"<p>Even the manual tells you it is only implemented for SQL compliance:</p> <p>The type time with time zone is defined by the SQL standard, but the definition exhibits properties which lead to questionable usefulness. In most cases, a combination of date, time, timestamp without time zone, and timestamp with time zone should provide a complete range of date/time functionality required by any application.</p>"},{"location":"rules/typing/time-with-time-zone/#pgrubic.rules.typing.TP002.TimeWithTimeZone--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/typing/time-with-time-zone/#pgrubic.rules.typing.TP002.TimeWithTimeZone--use-instead","title":"Use instead:","text":"<p>timestamptz (also known as timestamp with time zone).</p>"},{"location":"rules/typing/timestamp-with-timezone-with-precision/","title":"timestamp-with-timezone-with-precision (TP003)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/typing/timestamp-with-timezone-with-precision/#pgrubic.rules.typing.TP003.TimestampWithTimezoneWithPrecision--what-it-does","title":"What it does","text":"<p>Checks for usage of timestamp with time zone with precision.</p>"},{"location":"rules/typing/timestamp-with-timezone-with-precision/#pgrubic.rules.typing.TP003.TimestampWithTimezoneWithPrecision--why-not","title":"Why not?","text":"<p>Because it rounds off the fractional part rather than truncating it as everyone would expect. This can cause unexpected issues; consider that when you store now() into such a column, you might be storing a value half a second in the future.</p>"},{"location":"rules/typing/timestamp-with-timezone-with-precision/#pgrubic.rules.typing.TP003.TimestampWithTimezoneWithPrecision--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/typing/timestamp-with-timezone-with-precision/#pgrubic.rules.typing.TP003.TimestampWithTimezoneWithPrecision--use-instead","title":"Use instead:","text":"<p>timestamptz (also known as timestamp with time zone) without precision.</p>"},{"location":"rules/typing/timestamp-without-timezone/","title":"timestamp-without-timezone (TP001)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/typing/timestamp-without-timezone/#pgrubic.rules.typing.TP001.TimestampWithoutTimezone--what-it-does","title":"What it does","text":"<p>Checks for usage of timestamp without time zone.</p>"},{"location":"rules/typing/timestamp-without-timezone/#pgrubic.rules.typing.TP001.TimestampWithoutTimezone--why-not","title":"Why not?","text":"<p>timestamptz (also known as timestamp with time zone) zone records a single moment in time. Despite what the name says it doesn't store a timestamp, just a point in time described as the number of microseconds since January 1st, 2000 in UTC. You can insert values in any timezone and it'll store the point in time that value describes. By default it will display times in your current timezone, but you can use at time zone to display it in other time zones. Because it stores a point in time, it will do the right thing with arithmetic involving timestamps entered in different timezones - including between timestamps from the same statement_location on different sides of a daylight savings time change.</p> <p>timestamp (also known as timestamp without time zone) does not do any of that, it just stores a date and time you give it. You can think of it being a picture of a calendar and a clock rather than a point in time. Without additional information - the timezone - you don't know what time it records. Because of that, arithmetic between timestamps from different locations or between timestamps from summer and winter may give the wrong answer.</p> <p>So if what you want to store is a point in time, rather than a picture of a clock, use timestamptz (timestamp with time zone).</p>"},{"location":"rules/typing/timestamp-without-timezone/#pgrubic.rules.typing.TP001.TimestampWithoutTimezone--when-should-you","title":"When should you?","text":"<p>If you're dealing with timestamps in an abstract way, or just saving and retrieving them from an app, where you aren't going to be doing arithmetic with them then timestamp might be suitable.</p>"},{"location":"rules/typing/timestamp-without-timezone/#pgrubic.rules.typing.TP001.TimestampWithoutTimezone--use-instead","title":"Use instead:","text":"<p>timestamptz (also known as timestamp with time zone).</p>"},{"location":"rules/typing/varchar/","title":"varchar (TP005)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/typing/varchar/#pgrubic.rules.typing.TP005.Varchar--what-it-does","title":"What it does","text":"<p>Checks for usage of varchar.</p>"},{"location":"rules/typing/varchar/#pgrubic.rules.typing.TP005.Varchar--why-not","title":"Why not?","text":"<p>varchar(n) is a variable width text field that will throw an error if you try and insert a string longer than n characters (not bytes) into it.</p> <p>varchar (without the (n)) or text are similar, but without the length limit. If you insert the same string into the three field types they will take up exactly the same amount of space, and you won't be able to measure any difference in performance.</p> <p>If what you really need is a text field with an length limit then varchar(n) is great, but if you pick an arbitrary length and choose varchar(20) for a surname field you are risking production errors in the future when Hubert Blaine Wolfe\u00adschlegel\u00adstein\u00adhausen\u00adberger\u00addorff signs up for your service.</p> <p>Some databases do not have a type that can hold arbitrary long text, or if they do it's not as convenient or efficient or well-supported as varchar(n). Users from those databases will often use something like varchar(255) when what they really want is text.</p> <p>If you need to constrain the value in a field you probably need something more specific than a maximum length - maybe a minimum length too, or a limited set of characters - and a check constraint can do all of those things as well as a maximum string length.</p>"},{"location":"rules/typing/varchar/#pgrubic.rules.typing.TP005.Varchar--when-should-you","title":"When should you?","text":"<p>When you want to, really. If what you want is a text field that will throw an error if you insert too long a string into it, and you don't want to use an explicit check constraint then varchar(n) is a perfectly good type. Just don't use it automatically without thinking about it.</p> <p>Also, the varchar type is in the SQL standard, unlike the text type, so it might be the best choice for writing super-portable applications.</p>"},{"location":"rules/typing/varchar/#pgrubic.rules.typing.TP005.Varchar--use-instead","title":"Use instead:","text":"<ol> <li>text</li> <li>text with a constraint that enforces a maximum string length</li> </ol>"},{"location":"rules/typing/wrongly-typed-required-column/","title":"wrongly-typed-required-column (TP015)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/typing/wrongly-typed-required-column/#pgrubic.rules.typing.TP015.WronglyTypedRequiredColumn--what-it-does","title":"What it does","text":"<p>Checks for wrongly typed required columns.</p>"},{"location":"rules/typing/wrongly-typed-required-column/#pgrubic.rules.typing.TP015.WronglyTypedRequiredColumn--why-not","title":"Why not?","text":"<p>If a column has been specified as required and you have typed it wrongly, you are probably doing something wrong.</p>"},{"location":"rules/typing/wrongly-typed-required-column/#pgrubic.rules.typing.TP015.WronglyTypedRequiredColumn--when-should-you","title":"When should you?","text":"<p>Never.</p>"},{"location":"rules/typing/wrongly-typed-required-column/#pgrubic.rules.typing.TP015.WronglyTypedRequiredColumn--use-instead","title":"Use instead:","text":"<p>Right data type for the required column.</p>"},{"location":"rules/typing/wrongly-typed-required-column/#pgrubic.rules.typing.TP015.WronglyTypedRequiredColumn--configuration","title":"Configuration","text":"<p><code>required-columns</code>: List of required columns along with their data types.</p>"},{"location":"rules/typing/xml/","title":"xml (TP012)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/typing/xml/#pgrubic.rules.typing.TP012.Xml--what-it-does","title":"What it does","text":"<p>Checks for usage of xml.</p>"},{"location":"rules/typing/xml/#pgrubic.rules.typing.TP012.Xml--why-not","title":"Why not?","text":"<p>Downsides to using XML include slower processing and querying due to its complexity, higher storage requirements and challenges in efficient indexing, rigidity in adapting to schema changes, and the overall complexity in data handling due to XML's verbose and hierarchical structure. These factors suggest that XML can lead to increased resource usage and development difficulties, making formats like JSON more suitable.</p>"},{"location":"rules/typing/xml/#pgrubic.rules.typing.TP012.Xml--when-should-you","title":"When should you?","text":"<p>Despite its drawbacks, XML might be suitable when there is a need for data interchange with systems that require XML format, or when dealing with legacy systems where data is already in XML format.</p>"},{"location":"rules/typing/xml/#pgrubic.rules.typing.TP012.Xml--use-instead","title":"Use instead:","text":"<p>jsonb.</p>"},{"location":"rules/unsafe/adding-auto-increment-column/","title":"adding-auto-increment-column (US004)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/adding-auto-increment-column/#pgrubic.rules.unsafe.US004.AddingAutoIncrementColumn--what-it-does","title":"What it does","text":"<p>Checks adding of auto increment column.</p>"},{"location":"rules/unsafe/adding-auto-increment-column/#pgrubic.rules.unsafe.US004.AddingAutoIncrementColumn--why-not","title":"Why not?","text":"<p>Adding an auto increment column to an already populated table will have to backfill the newly added column, causing the table to be locked in which no other operations can be performed on the table for the duration of the backfill. This will cause downtime if the table is concurrently being accessed by other clients.</p>"},{"location":"rules/unsafe/adding-auto-increment-column/#pgrubic.rules.unsafe.US004.AddingAutoIncrementColumn--when-should-you","title":"When should you?","text":"<p>If the table is empty. If the table is not empty but is not being concurrently accessed.</p>"},{"location":"rules/unsafe/adding-auto-increment-column/#pgrubic.rules.unsafe.US004.AddingAutoIncrementColumn--use-instead","title":"Use instead:","text":"<ol> <li>Create a new column typed bigint, nullable.</li> <li>Create a sequence.</li> <li>Set the next value of the sequence to the total number of rows in the table    with enough offset.</li> <li>Set the default value of the new column to the next value of the sequence.</li> <li>Backfill the new column for all existing rows.</li> <li>If the new column is to be set as not null,    add a check constraint: CHECK (column IS NOT NULL) NOT VALID</li> <li>Validate the constraint.</li> <li>Set the column as NOT NULL.</li> <li>Drop the constraint.</li> </ol>"},{"location":"rules/unsafe/adding-auto-increment-identity-column/","title":"adding-auto-increment-identity-column (US005)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/adding-auto-increment-identity-column/#pgrubic.rules.unsafe.US005.AddingAutoIncrementIdentityColumn--what-it-does","title":"What it does","text":"<p>Checks adding of auto increment identity column.</p>"},{"location":"rules/unsafe/adding-auto-increment-identity-column/#pgrubic.rules.unsafe.US005.AddingAutoIncrementIdentityColumn--why-not","title":"Why not?","text":"<p>Adding an auto increment identity column to an already populated table will have to backfill the newly added column, causing the table to be locked in which no other operations can be performed on the table for the duration of the backfill. This will cause downtime if the table is concurrently being accessed by other clients.</p>"},{"location":"rules/unsafe/adding-auto-increment-identity-column/#pgrubic.rules.unsafe.US005.AddingAutoIncrementIdentityColumn--when-should-you","title":"When should you?","text":"<p>If the table is empty. If the table is not empty but is not being concurrently accessed.</p>"},{"location":"rules/unsafe/adding-auto-increment-identity-column/#pgrubic.rules.unsafe.US005.AddingAutoIncrementIdentityColumn--use-instead","title":"Use instead:","text":"<ol> <li>Create a new column typed bigint, nullable.</li> <li>Create a sequence.</li> <li>Set the next value of the sequence to the total number of rows in the table    with enough offset.</li> <li>Set the default value of the new column to the next value of the sequence.</li> <li>Backfill the new column for all existing rows.</li> <li>Add a check constraint: CHECK (column IS NOT NULL) NOT VALID.</li> <li>Validate the constraint.</li> <li>Set the column as NOT NULL</li> <li>Drop the constraint.</li> <li>Get the last value of the sequence, with enough offset.</li> <li>In a single transaction:<ul> <li>Drop the default on the new column.</li> <li>Drop the sequence created in step 2.</li> <li>Add GENERATED ALWAYS AS IDENTITY constraint instead, specifying the start option as the value from step 10.</li> </ul> </li> </ol>"},{"location":"rules/unsafe/adding-stored-generated-column/","title":"adding-stored-generated-column (US006)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/adding-stored-generated-column/#pgrubic.rules.unsafe.US006.AddingStoredGeneratedColumn--what-it-does","title":"What it does","text":"<p>Checks adding of stored generated column.</p>"},{"location":"rules/unsafe/adding-stored-generated-column/#pgrubic.rules.unsafe.US006.AddingStoredGeneratedColumn--why-not","title":"Why not?","text":"<p>Adding an stored generated column to an already populated table will have to backfill the newly added column, causing the table to be locked in which no other operations can be performed on the table for the duration of the backfill. This will cause downtime if the table is concurrently being accessed by other clients.</p>"},{"location":"rules/unsafe/adding-stored-generated-column/#pgrubic.rules.unsafe.US006.AddingStoredGeneratedColumn--when-should-you","title":"When should you?","text":"<p>If the table is empty. If the table is not empty but is not being concurrently accessed.</p>"},{"location":"rules/unsafe/adding-stored-generated-column/#pgrubic.rules.unsafe.US006.AddingStoredGeneratedColumn--use-instead","title":"Use instead:","text":"<p>A trigger might be a safer option.</p>"},{"location":"rules/unsafe/cluster/","title":"cluster (US025)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/cluster/#pgrubic.rules.unsafe.US025.Cluster--what-it-does","title":"What it does","text":"<p>Checks cluster.</p>"},{"location":"rules/unsafe/cluster/#pgrubic.rules.unsafe.US025.Cluster--why-not","title":"Why not?","text":"<p>When a table is being clustered, an ACCESS EXCLUSIVE lock is acquired on it. This prevents any other database operations (both reads and writes) from operating on the table until the CLUSTER is finished. This will cause downtime if the table is concurrently being accessed by other clients.</p>"},{"location":"rules/unsafe/cluster/#pgrubic.rules.unsafe.US025.Cluster--when-should-you","title":"When should you?","text":"<p>If the table is empty. If the table is not empty but is not being concurrently accessed.</p>"},{"location":"rules/unsafe/cluster/#pgrubic.rules.unsafe.US025.Cluster--use-instead","title":"Use instead:","text":"<p>Have a look at pg_repack as an alternative.</p>"},{"location":"rules/unsafe/column-data-type-change/","title":"column-data-type-change (US002)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/column-data-type-change/#pgrubic.rules.unsafe.US002.ColumnDataTypeChange--what-it-does","title":"What it does","text":"<p>Checks column data type change.</p>"},{"location":"rules/unsafe/column-data-type-change/#pgrubic.rules.unsafe.US002.ColumnDataTypeChange--why-not","title":"Why not?","text":"<p>Changing a column's data type requires an ACCESS EXCLUSIVE lock on the table, preventing both reads and writes. Generally, such change forces a rewrite of the whole table and indexes with every other transactions being blocked for the duration of the rewrite. As an exception to rewrite, when changing the type of an existing column, if the USING clause does not change the column contents and the old type is either binary coercible to the new type or an unconstrained domain over the new type, a table rewrite is not needed. However, indexes must always be rebuilt unless the system can verify that the new index would be logically equivalent to the existing one.</p> <p>This change might also cause errors and break applications that rely on the column potentially disrupting business operations.</p>"},{"location":"rules/unsafe/column-data-type-change/#pgrubic.rules.unsafe.US002.ColumnDataTypeChange--when-should-you","title":"When should you?","text":"<p>If the above exception to table and index rewrite is applicable and the clients have been made aware of the new type.</p>"},{"location":"rules/unsafe/column-data-type-change/#pgrubic.rules.unsafe.US002.ColumnDataTypeChange--use-instead","title":"Use instead:","text":"<ol> <li>Create a new column with the new type, nullable.</li> <li>Start writing data to the new column.</li> <li>Copy all data from the old column to the new column.</li> <li>Migrate clients to the new column.</li> </ol>"},{"location":"rules/unsafe/column-rename/","title":"column-rename (US003)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/column-rename/#pgrubic.rules.unsafe.US003.ColumnRename--what-it-does","title":"What it does","text":"<p>Checks renaming of column.</p>"},{"location":"rules/unsafe/column-rename/#pgrubic.rules.unsafe.US003.ColumnRename--why-not","title":"Why not?","text":"<p>Renaming a column can easily break applications that rely on the column.</p> <p>If any part of the application code, database procedures, views, or reports use the column, renaming it will cause errors and potentially disrupt business operations.</p>"},{"location":"rules/unsafe/column-rename/#pgrubic.rules.unsafe.US003.ColumnRename--when-should-you","title":"When should you?","text":"<p>If the column is no longer being referenced by clients, probably after migrating clients to a new column.</p>"},{"location":"rules/unsafe/column-rename/#pgrubic.rules.unsafe.US003.ColumnRename--use-instead","title":"Use instead:","text":"<ol> <li>Create a new column with the new name, nullable.</li> <li>Start writing data to the new column.</li> <li>Copy all data from the old column to the new column.</li> <li>Migrate clients to the new column.</li> </ol>"},{"location":"rules/unsafe/drop-column/","title":"drop-column (US001)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/drop-column/#pgrubic.rules.unsafe.US001.DropColumn--what-it-does","title":"What it does","text":"<p>Checks dropping of column.</p>"},{"location":"rules/unsafe/drop-column/#pgrubic.rules.unsafe.US001.DropColumn--why-not","title":"Why not?","text":"<p>Not only that mistakenly dropping a column can cause data loss, applications that rely on the column will break.</p> <p>If any part of the application code, database procedures, views, or reports use the column, dropping it will cause errors and potentially disrupt business operations.</p> <p>Removing a column from a table may appear to be a reversible action, but it is not. Even when you can recover all the data in the column, you cannot restore the column in a way that makes the table look exactly as it did before.</p> <p>In postgres, DROP COLUMN form does not physically remove the column, but simply makes it invisible to SQL operations. Subsequent INSERT and UPDATE operations in the table will store a NULL value for the column.</p>"},{"location":"rules/unsafe/drop-column/#pgrubic.rules.unsafe.US001.DropColumn--when-should-you","title":"When should you?","text":"<p>After updating clients that rely on the column to stop referencing the column and you really want to discard the data in the column.</p>"},{"location":"rules/unsafe/drop-column/#pgrubic.rules.unsafe.US001.DropColumn--use-instead","title":"Use instead:","text":"<p>You can either keep the column as nullable or drop it once it is no longer being referenced by clients.</p>"},{"location":"rules/unsafe/drop-database/","title":"drop-database (US008)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/drop-database/#pgrubic.rules.unsafe.US008.DropDatabase--what-it-does","title":"What it does","text":"<p>Checks dropping of database.</p>"},{"location":"rules/unsafe/drop-database/#pgrubic.rules.unsafe.US008.DropDatabase--why-not","title":"Why not?","text":"<p>Not only that mistakenly dropping a database can cause data loss, applications that rely on the data will break.</p>"},{"location":"rules/unsafe/drop-database/#pgrubic.rules.unsafe.US008.DropDatabase--when-should-you","title":"When should you?","text":"<p>If you really want to drop the database.</p>"},{"location":"rules/unsafe/drop-database/#pgrubic.rules.unsafe.US008.DropDatabase--use-instead","title":"Use instead:","text":"<p>No suggestions.</p>"},{"location":"rules/unsafe/drop-schema/","title":"drop-schema (US009)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/drop-schema/#pgrubic.rules.unsafe.US009.DropSchema--what-it-does","title":"What it does","text":"<p>Checks dropping of schema.</p>"},{"location":"rules/unsafe/drop-schema/#pgrubic.rules.unsafe.US009.DropSchema--why-not","title":"Why not?","text":"<p>Not only that mistakenly dropping a schema can cause data loss, applications that rely on the data will break.</p>"},{"location":"rules/unsafe/drop-schema/#pgrubic.rules.unsafe.US009.DropSchema--when-should-you","title":"When should you?","text":"<p>If you really want to drop the schema.</p>"},{"location":"rules/unsafe/drop-schema/#pgrubic.rules.unsafe.US009.DropSchema--use-instead","title":"Use instead:","text":"<p>No suggestions.</p>"},{"location":"rules/unsafe/drop-table/","title":"drop-table (US021)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/drop-table/#pgrubic.rules.unsafe.US021.DropTable--what-it-does","title":"What it does","text":"<p>Checks drop table.</p>"},{"location":"rules/unsafe/drop-table/#pgrubic.rules.unsafe.US021.DropTable--why-not","title":"Why not?","text":"<p>Not only that mistakenly dropping a table can cause data loss, applications that rely on the data will break.</p>"},{"location":"rules/unsafe/drop-table/#pgrubic.rules.unsafe.US021.DropTable--when-should-you","title":"When should you?","text":"<p>If you really want to drop the table.</p>"},{"location":"rules/unsafe/drop-table/#pgrubic.rules.unsafe.US021.DropTable--use-instead","title":"Use instead:","text":"<p>No suggestions.</p>"},{"location":"rules/unsafe/drop-tablespace/","title":"drop-tablespace (US007)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/drop-tablespace/#pgrubic.rules.unsafe.US007.DropTablespace--what-it-does","title":"What it does","text":"<p>Checks dropping of tablespace.</p>"},{"location":"rules/unsafe/drop-tablespace/#pgrubic.rules.unsafe.US007.DropTablespace--why-not","title":"Why not?","text":"<p>Not only that mistakenly dropping a tablespace can cause data loss, applications that rely on the data will break.</p>"},{"location":"rules/unsafe/drop-tablespace/#pgrubic.rules.unsafe.US007.DropTablespace--when-should-you","title":"When should you?","text":"<p>If you really want to drop the tablespace.</p>"},{"location":"rules/unsafe/drop-tablespace/#pgrubic.rules.unsafe.US007.DropTablespace--use-instead","title":"Use instead:","text":"<p>No suggestions.</p>"},{"location":"rules/unsafe/index-movement-to-tablespace/","title":"index-movement-to-tablespace (US017)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/index-movement-to-tablespace/#pgrubic.rules.unsafe.US017.IndexMovementToTablespace--what-it-does","title":"What it does","text":"<p>Checks index movement to a tablespace.</p>"},{"location":"rules/unsafe/index-movement-to-tablespace/#pgrubic.rules.unsafe.US017.IndexMovementToTablespace--why-not","title":"Why not?","text":"<p>Moving an index to a different tablespace acquires an ACCESS EXCLUSIVE lock on the table, blocking other accesses until the movement is completed. This will cause downtime if the table is concurrently being accessed by other clients.</p>"},{"location":"rules/unsafe/index-movement-to-tablespace/#pgrubic.rules.unsafe.US017.IndexMovementToTablespace--when-should-you","title":"When should you?","text":"<p>If the table is empty. If the table is not empty but is not being concurrently accessed.</p>"},{"location":"rules/unsafe/index-movement-to-tablespace/#pgrubic.rules.unsafe.US017.IndexMovementToTablespace--use-instead","title":"Use instead:","text":"<p>Have a look at pg_repack as an alternative.</p>"},{"location":"rules/unsafe/indexes-movement-to-tablespace/","title":"indexes-movement-to-tablespace (US018)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/indexes-movement-to-tablespace/#pgrubic.rules.unsafe.US018.IndexesMovementToTablespace--what-it-does","title":"What it does","text":"<p>Checks indexes movement to a different tablespace.</p>"},{"location":"rules/unsafe/indexes-movement-to-tablespace/#pgrubic.rules.unsafe.US018.IndexesMovementToTablespace--why-not","title":"Why not?","text":"<p>Moving indexes to a different tablespace acquires an ACCESS EXCLUSIVE lock on the respective tables, blocking other accesses until the movement is completed. This will cause downtime if the tables are concurrently being accessed by other clients.</p>"},{"location":"rules/unsafe/indexes-movement-to-tablespace/#pgrubic.rules.unsafe.US018.IndexesMovementToTablespace--when-should-you","title":"When should you?","text":"<p>If the tables are empty. If the tables are not empty but is not being concurrently accessed.</p>"},{"location":"rules/unsafe/indexes-movement-to-tablespace/#pgrubic.rules.unsafe.US018.IndexesMovementToTablespace--use-instead","title":"Use instead:","text":"<p>Have a look at pg_repack as an alternative.</p>"},{"location":"rules/unsafe/mismatch-column-in-data-type-change/","title":"mismatch-column-in-data-type-change (US030)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/mismatch-column-in-data-type-change/#pgrubic.rules.unsafe.US030.MismatchColumnInDataTypeChange--what-it-does","title":"What it does","text":"<p>Checks for mismatch column in data type change.</p>"},{"location":"rules/unsafe/mismatch-column-in-data-type-change/#pgrubic.rules.unsafe.US030.MismatchColumnInDataTypeChange--why-not","title":"Why not?","text":"<p>For certain column data type changes, a USING clause must be provided if there is no implicit or assignment cast from old to new type. Logically, the expression in the USING should reference the original column otherwise it is most likely a mistake.</p>"},{"location":"rules/unsafe/mismatch-column-in-data-type-change/#pgrubic.rules.unsafe.US030.MismatchColumnInDataTypeChange--when-should-you","title":"When should you?","text":"<p>Almost never. When you are sure that the expression in the USING is indeed correct.</p>"},{"location":"rules/unsafe/mismatch-column-in-data-type-change/#pgrubic.rules.unsafe.US030.MismatchColumnInDataTypeChange--use-instead","title":"Use instead:","text":"<p>The right column in the USING clause.</p>"},{"location":"rules/unsafe/new-column-with-volatile-default/","title":"new-column-with-volatile-default (US031)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/new-column-with-volatile-default/#pgrubic.rules.unsafe.US031.NewColumnWithVolatileDefault--what-it-does","title":"What it does","text":"<p>Checks new column with volatile default.</p>"},{"location":"rules/unsafe/new-column-with-volatile-default/#pgrubic.rules.unsafe.US031.NewColumnWithVolatileDefault--why-not","title":"Why not?","text":"<p>Adding a new column with a volatile default to an already populated table will have to backfill the newly added column with the default, causing the table to be locked and rewritten, in which no other operations can be performed on the table for the duration of the rewrite. This will cause downtime if the table is concurrently being accessed by other clients.</p>"},{"location":"rules/unsafe/new-column-with-volatile-default/#pgrubic.rules.unsafe.US031.NewColumnWithVolatileDefault--when-should-you","title":"When should you?","text":"<p>If the table is empty. If the table is not empty but is not being concurrently accessed.</p>"},{"location":"rules/unsafe/new-column-with-volatile-default/#pgrubic.rules.unsafe.US031.NewColumnWithVolatileDefault--use-instead","title":"Use instead:","text":"<ol> <li>Create the new column, nullable and without the volatile default.</li> <li>Set the default value for the newly created column.</li> <li>Backfill the newly created column for all existing rows.</li> </ol>"},{"location":"rules/unsafe/new-not-null-column-with-volatile-default/","title":"new-not-null-column-with-volatile-default (US011)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/new-not-null-column-with-volatile-default/#pgrubic.rules.unsafe.US011.NewNotNullColumnWithVolatileDefault--what-it-does","title":"What it does","text":"<p>Checks new not-null column with volatile default.</p>"},{"location":"rules/unsafe/new-not-null-column-with-volatile-default/#pgrubic.rules.unsafe.US011.NewNotNullColumnWithVolatileDefault--why-not","title":"Why not?","text":"<p>Adding a new column with NOT NULL constraint and a volatile default to an already populated table will have to backfill the newly added column with the default, causing the table to be locked, in which no other operations can be performed on the table for the duration of the backfill. This will cause downtime if the table is concurrently being accessed by other clients.</p>"},{"location":"rules/unsafe/new-not-null-column-with-volatile-default/#pgrubic.rules.unsafe.US011.NewNotNullColumnWithVolatileDefault--when-should-you","title":"When should you?","text":"<p>If the table is empty. If the table is not empty but is not being concurrently accessed.</p>"},{"location":"rules/unsafe/new-not-null-column-with-volatile-default/#pgrubic.rules.unsafe.US011.NewNotNullColumnWithVolatileDefault--use-instead","title":"Use instead:","text":"<ol> <li>Create the new column, nullable.</li> <li>Set the default value for the newly created column.</li> <li>Backfill the newly created column for all existing rows.</li> <li>Create a check constraint: CHECK (column IS NOT NULL) NOT VALID.</li> <li>Validate the constraint.</li> <li>Set the column as NOT NULL.</li> <li>Drop the check constraint.</li> </ol>"},{"location":"rules/unsafe/non-concurrent-detach-partition/","title":"non-concurrent-detach-partition (US027)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/unsafe/non-concurrent-detach-partition/#pgrubic.rules.unsafe.US027.NonConcurrentDetachPartition--what-it-does","title":"What it does","text":"<p>Checks non-concurrent detach partition.</p>"},{"location":"rules/unsafe/non-concurrent-detach-partition/#pgrubic.rules.unsafe.US027.NonConcurrentDetachPartition--why-not","title":"Why not?","text":"<p>Detaching a partition in non-concurrent mode acquires an ACCESS EXCLUSIVE lock on both the partition and the parent table, blocking other accesses to all partitions until the DETACH PARTITION is completed. This will cause downtime if the partitions are concurrently being accessed by other clients.</p> <p>Concurrent mode, CONCURRENTLY is a new feature from PostgreSQL 14.</p>"},{"location":"rules/unsafe/non-concurrent-detach-partition/#pgrubic.rules.unsafe.US027.NonConcurrentDetachPartition--when-should-you","title":"When should you?","text":"<p>If the partitioned table is empty. If the partitioned table is not empty but is not being concurrently accessed.</p>"},{"location":"rules/unsafe/non-concurrent-detach-partition/#pgrubic.rules.unsafe.US027.NonConcurrentDetachPartition--use-instead","title":"Use instead:","text":"<p>From PostgreSQL 14, detach the partition in concurrent mode:     ALTER TABLE .. DETACH PARTITION .. CONCURRENTLY</p>"},{"location":"rules/unsafe/non-concurrent-index-creation/","title":"non-concurrent-index-creation (US016)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/unsafe/non-concurrent-index-creation/#pgrubic.rules.unsafe.US016.NonConcurrentIndexCreation--what-it-does","title":"What it does","text":"<p>Checks non-concurrent index creation.</p>"},{"location":"rules/unsafe/non-concurrent-index-creation/#pgrubic.rules.unsafe.US016.NonConcurrentIndexCreation--why-not","title":"Why not?","text":"<p>Creating an index in non-concurrent mode will locks out writes (but not reads) on the table until it is done. This will cause downtime if the table is concurrently being written by other clients.</p>"},{"location":"rules/unsafe/non-concurrent-index-creation/#pgrubic.rules.unsafe.US016.NonConcurrentIndexCreation--when-should-you","title":"When should you?","text":"<p>If the table is empty. If the table is not empty but is not being concurrently written.</p>"},{"location":"rules/unsafe/non-concurrent-index-creation/#pgrubic.rules.unsafe.US016.NonConcurrentIndexCreation--use-instead","title":"Use instead:","text":"<p>Create the index in concurrent mode: CREATE .. INDEX CONCURRENTLY ON ...</p>"},{"location":"rules/unsafe/non-concurrent-index-drop/","title":"non-concurrent-index-drop (US019)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/unsafe/non-concurrent-index-drop/#pgrubic.rules.unsafe.US019.NonConcurrentIndexDrop--what-it-does","title":"What it does","text":"<p>Checks non-concurrent index drop.</p>"},{"location":"rules/unsafe/non-concurrent-index-drop/#pgrubic.rules.unsafe.US019.NonConcurrentIndexDrop--why-not","title":"Why not?","text":"<p>Dropping an index in non-concurrent mode acquires an ACCESS EXCLUSIVE lock on the table, blocking other accesses until the index drop is completed. This will cause downtime if the table is concurrently being accessed by other clients.</p>"},{"location":"rules/unsafe/non-concurrent-index-drop/#pgrubic.rules.unsafe.US019.NonConcurrentIndexDrop--when-should-you","title":"When should you?","text":"<p>If the table is empty. If the table is not empty but is not being concurrently accessed.</p>"},{"location":"rules/unsafe/non-concurrent-index-drop/#pgrubic.rules.unsafe.US019.NonConcurrentIndexDrop--use-instead","title":"Use instead:","text":"<p>Drop the index in concurrent mode: DROP INDEX CONCURRENTLY ...</p>"},{"location":"rules/unsafe/non-concurrent-refresh-materialized-view/","title":"non-concurrent-refresh-materialized-view (US028)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/unsafe/non-concurrent-refresh-materialized-view/#pgrubic.rules.unsafe.US028.NonConcurrentRefreshMaterializedView--what-it-does","title":"What it does","text":"<p>Checks non-concurrent refresh materialized view.</p>"},{"location":"rules/unsafe/non-concurrent-refresh-materialized-view/#pgrubic.rules.unsafe.US028.NonConcurrentRefreshMaterializedView--why-not","title":"Why not?","text":"<p>Refreshing a materialized view in non-concurrent mode will locks out reads on the materialized view until it is done. This will cause downtime if the materialized view is concurrently being read by other clients.</p>"},{"location":"rules/unsafe/non-concurrent-refresh-materialized-view/#pgrubic.rules.unsafe.US028.NonConcurrentRefreshMaterializedView--when-should-you","title":"When should you?","text":"<p>If downtime is acceptable.</p>"},{"location":"rules/unsafe/non-concurrent-refresh-materialized-view/#pgrubic.rules.unsafe.US028.NonConcurrentRefreshMaterializedView--use-instead","title":"Use instead:","text":"<p>Refresh the materialized view in concurrent mode:     REFRESH MATERIALIZED VIEW CONCURRENTLY ..</p> <p>Please note that CONCURRENTLY option is only allowed if there is at least one UNIQUE index on the materialized view which uses only column names and includes all rows; that is, it must not be an expression index or include a WHERE clause.</p>"},{"location":"rules/unsafe/non-concurrent-reindex/","title":"non-concurrent-reindex (US020)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/unsafe/non-concurrent-reindex/#pgrubic.rules.unsafe.US020.NonConcurrentReindex--what-it-does","title":"What it does","text":"<p>Checks non-concurrent reindex.</p>"},{"location":"rules/unsafe/non-concurrent-reindex/#pgrubic.rules.unsafe.US020.NonConcurrentReindex--why-not","title":"Why not?","text":"<p>Reindexing in non-concurrent mode will locks out writes (but not reads) on the table until it is done. This will cause downtime if the table is concurrently being written by other clients.</p>"},{"location":"rules/unsafe/non-concurrent-reindex/#pgrubic.rules.unsafe.US020.NonConcurrentReindex--when-should-you","title":"When should you?","text":"<p>If the table is empty. If the table is not empty but is not being concurrently written.</p>"},{"location":"rules/unsafe/non-concurrent-reindex/#pgrubic.rules.unsafe.US020.NonConcurrentReindex--use-instead","title":"Use instead:","text":"<p>Reindex in concurrent mode: REINDEX .. CONCURRENTLY ...</p>"},{"location":"rules/unsafe/not-null-constraint-on-existing-column/","title":"not-null-constraint-on-existing-column (US010)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/not-null-constraint-on-existing-column/#pgrubic.rules.unsafe.US010.NotNullConstraintOnExistingColumn--what-it-does","title":"What it does","text":"<p>Checks NOT NULL constraint on an existing column.</p>"},{"location":"rules/unsafe/not-null-constraint-on-existing-column/#pgrubic.rules.unsafe.US010.NotNullConstraintOnExistingColumn--why-not","title":"Why not?","text":"<p>Adding a NOT NULL constraint to an existing column of an already populated table will have to scan and validate that there are no nulls in the column, causing the table to be locked in which no other operations can be performed on the table for the duration of the validation. This will cause downtime if the table is concurrently being accessed by other clients.</p>"},{"location":"rules/unsafe/not-null-constraint-on-existing-column/#pgrubic.rules.unsafe.US010.NotNullConstraintOnExistingColumn--when-should-you","title":"When should you?","text":"<p>If the table is empty. If the table is not empty but is not being concurrently accessed.</p>"},{"location":"rules/unsafe/not-null-constraint-on-existing-column/#pgrubic.rules.unsafe.US010.NotNullConstraintOnExistingColumn--use-instead","title":"Use instead:","text":"<ol> <li>Create a check constraint: CHECK (column IS NOT NULL) NOT VALID.</li> <li>Validate the constraint.</li> <li>Set the column as NOT NULL.</li> <li>Drop the constraint.</li> </ol>"},{"location":"rules/unsafe/primary-key-constraint-creating-index/","title":"primary-key-constraint-creating-index (US015)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/primary-key-constraint-creating-index/#pgrubic.rules.unsafe.US015.PrimaryKeyConstraintCreatingIndex--what-it-does","title":"What it does","text":"<p>Checks primary key constraint creating index.</p>"},{"location":"rules/unsafe/primary-key-constraint-creating-index/#pgrubic.rules.unsafe.US015.PrimaryKeyConstraintCreatingIndex--why-not","title":"Why not?","text":"<p>Primary key constraint is supported by a unique index and a NOT NULL constraint in the background. Adding a primary key constraint to an already populated table will create a unique index in non-concurrent mode, scanning and validating that there are no violating records in the table. This causes the table to be locked, in which no other operations can be performed on the table for the duration of the validation. This will cause downtime if the table is concurrently being accessed by other clients.</p>"},{"location":"rules/unsafe/primary-key-constraint-creating-index/#pgrubic.rules.unsafe.US015.PrimaryKeyConstraintCreatingIndex--when-should-you","title":"When should you?","text":"<p>If the table is empty. If the table is not empty but is not being concurrently accessed.</p>"},{"location":"rules/unsafe/primary-key-constraint-creating-index/#pgrubic.rules.unsafe.US015.PrimaryKeyConstraintCreatingIndex--use-instead","title":"Use instead:","text":"<ol> <li>Create a unique index in concurrent mode:     CREATE UNIQUE INDEX CONCURRENTLY .. ON .. (..).</li> <li>In case the primary key column(s) are nullable, create a non-validating check    constraint: CHECK (column(s) IS NOT NULL) NOT VALID.</li> <li>Validate the constraint.</li> <li>Set the primary key column(s) as NOT NULL.</li> <li>Drop the constraint.</li> <li>Add the primary key constraint using the index created in step 1:     ALTER TABLE .. ADD CONSTRAINT .. PRIMARY KEY USING INDEX ..</li> </ol>"},{"location":"rules/unsafe/rename-table/","title":"rename-table (US022)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/rename-table/#pgrubic.rules.unsafe.US022.RenameTable--what-it-does","title":"What it does","text":"<p>Checks renaming of table.</p>"},{"location":"rules/unsafe/rename-table/#pgrubic.rules.unsafe.US022.RenameTable--why-not","title":"Why not?","text":"<p>Renaming a table can easily break applications that rely on the table.</p> <p>If any part of the application code, database procedures, views, or reports use the table, renaming it will cause errors and potentially disrupt business operations.</p>"},{"location":"rules/unsafe/rename-table/#pgrubic.rules.unsafe.US022.RenameTable--when-should-you","title":"When should you?","text":"<p>If the table is no longer being accessed by clients, probably after migrating clients to a new table.</p>"},{"location":"rules/unsafe/rename-table/#pgrubic.rules.unsafe.US022.RenameTable--use-instead","title":"Use instead:","text":"<ol> <li>Create a new table with the new name.</li> <li>Start writing data to the new table.</li> <li>Copy all data from the old table to the new table.</li> <li>Migrate clients to the new table.</li> </ol>"},{"location":"rules/unsafe/table-movement-to-tablespace/","title":"table-movement-to-tablespace (US023)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/table-movement-to-tablespace/#pgrubic.rules.unsafe.US023.TableMovementToTablespace--what-it-does","title":"What it does","text":"<p>Checks table movement to a tablespace.</p>"},{"location":"rules/unsafe/table-movement-to-tablespace/#pgrubic.rules.unsafe.US023.TableMovementToTablespace--why-not","title":"Why not?","text":"<p>Moving a table to a different tablespace acquires an ACCESS EXCLUSIVE lock on the table, blocking other accesses until the movement is completed. This will cause downtime if the table is concurrently being accessed by other clients.</p>"},{"location":"rules/unsafe/table-movement-to-tablespace/#pgrubic.rules.unsafe.US023.TableMovementToTablespace--when-should-you","title":"When should you?","text":"<p>If the table is empty. If the table is not empty but is not being concurrently accessed.</p>"},{"location":"rules/unsafe/table-movement-to-tablespace/#pgrubic.rules.unsafe.US023.TableMovementToTablespace--use-instead","title":"Use instead:","text":"<p>Have a look at pg_repack as an alternative.</p>"},{"location":"rules/unsafe/tables-movement-to-tablespace/","title":"tables-movement-to-tablespace (US024)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/tables-movement-to-tablespace/#pgrubic.rules.unsafe.US024.TablesMovementToTablespace--what-it-does","title":"What it does","text":"<p>Checks tables movement to a different tablespace.</p>"},{"location":"rules/unsafe/tables-movement-to-tablespace/#pgrubic.rules.unsafe.US024.TablesMovementToTablespace--why-not","title":"Why not?","text":"<p>Moving tables to a different tablespace acquires an ACCESS EXCLUSIVE lock on the respective tables, blocking other accesses until the movement is completed. This will cause downtime if the tables are concurrently being accessed by other clients.</p>"},{"location":"rules/unsafe/tables-movement-to-tablespace/#pgrubic.rules.unsafe.US024.TablesMovementToTablespace--when-should-you","title":"When should you?","text":"<p>If the tables are empty. If the tables are not empty but is not being concurrently accessed.</p>"},{"location":"rules/unsafe/tables-movement-to-tablespace/#pgrubic.rules.unsafe.US024.TablesMovementToTablespace--use-instead","title":"Use instead:","text":"<p>Have a look at pg_repack as an alternative.</p>"},{"location":"rules/unsafe/truncate-table/","title":"truncate-table (US029)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/truncate-table/#pgrubic.rules.unsafe.US029.TruncateTable--what-it-does","title":"What it does","text":"<p>Checks truncating of table.</p>"},{"location":"rules/unsafe/truncate-table/#pgrubic.rules.unsafe.US029.TruncateTable--why-not","title":"Why not?","text":"<p>Truncating a table can easily break applications that rely on the data in the table.</p> <p>If any part of the application code, database procedures, views, or reports use the data, truncating it will cause errors and potentially disrupt business operations.</p>"},{"location":"rules/unsafe/truncate-table/#pgrubic.rules.unsafe.US029.TruncateTable--when-should-you","title":"When should you?","text":"<p>If the data in the table is no longer needed by clients, probably a test data.</p>"},{"location":"rules/unsafe/truncate-table/#pgrubic.rules.unsafe.US029.TruncateTable--use-instead","title":"Use instead:","text":"<p>No suggestions.</p>"},{"location":"rules/unsafe/unique-key-constraint-creating-index/","title":"unique-key-constraint-creating-index (US014)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/unique-key-constraint-creating-index/#pgrubic.rules.unsafe.US014.UniqueKeyConstraintCreatingIndex--what-it-does","title":"What it does","text":"<p>Checks unique key constraint creating index.</p>"},{"location":"rules/unsafe/unique-key-constraint-creating-index/#pgrubic.rules.unsafe.US014.UniqueKeyConstraintCreatingIndex--why-not","title":"Why not?","text":"<p>Unique key constraint is supported by a unique index in the background. Adding a unique key constraint to an already populated table will create a unique index in non-concurrent mode, scanning and validating that there are no violating records in the table. This causes the table to be locked, in which no other operations can be performed on the table for the duration of the validation. This will cause downtime if the table is concurrently being accessed by other clients.</p>"},{"location":"rules/unsafe/unique-key-constraint-creating-index/#pgrubic.rules.unsafe.US014.UniqueKeyConstraintCreatingIndex--when-should-you","title":"When should you?","text":"<p>If the table is empty. If the table is not empty but is not being concurrently accessed.</p>"},{"location":"rules/unsafe/unique-key-constraint-creating-index/#pgrubic.rules.unsafe.US014.UniqueKeyConstraintCreatingIndex--use-instead","title":"Use instead:","text":"<ol> <li>Create a unique index in concurrent mode:     CREATE UNIQUE INDEX CONCURRENTLY .. ON .. (..).</li> <li>Add the unique constraint using the index created in step 1:     ALTER TABLE .. ADD CONSTRAINT .. UNIQUE USING INDEX ..</li> </ol>"},{"location":"rules/unsafe/vacuum-full/","title":"vacuum-full (US026)","text":"<p>Automatic fix is not available.</p>"},{"location":"rules/unsafe/vacuum-full/#pgrubic.rules.unsafe.US026.VacuumFull--what-it-does","title":"What it does","text":"<p>Checks vacuum full.</p>"},{"location":"rules/unsafe/vacuum-full/#pgrubic.rules.unsafe.US026.VacuumFull--why-not","title":"Why not?","text":"<p>When a table is being vacuumed with the FULL option, an ACCESS EXCLUSIVE lock is acquired on it, preventing any other database operations (both reads and writes) from operating on the table until the VACUUM FULL is finished. This will cause downtime if the table is concurrently being accessed by other clients.</p>"},{"location":"rules/unsafe/vacuum-full/#pgrubic.rules.unsafe.US026.VacuumFull--when-should-you","title":"When should you?","text":"<p>If the table is empty. If the table is not empty but is not being concurrently accessed.</p>"},{"location":"rules/unsafe/vacuum-full/#pgrubic.rules.unsafe.US026.VacuumFull--use-instead","title":"Use instead:","text":"<p>Have a look at pg_repack as an alternative.</p>"},{"location":"rules/unsafe/validating-check-constraint-on-existing-rows/","title":"validating-check-constraint-on-existing-rows (US013)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/unsafe/validating-check-constraint-on-existing-rows/#pgrubic.rules.unsafe.US013.ValidatingCheckConstraintOnExistingRows--what-it-does","title":"What it does","text":"<p>Checks validating check constraint on existing rows.</p>"},{"location":"rules/unsafe/validating-check-constraint-on-existing-rows/#pgrubic.rules.unsafe.US013.ValidatingCheckConstraintOnExistingRows--why-not","title":"Why not?","text":"<p>Adding a check constraint to an already populated table will have to scan and validate that there are no violating records in the table, causing the table to be locked in which no other operations can be performed on the table for the duration of the validation. This will cause downtime if the table is concurrently being accessed by other clients.</p>"},{"location":"rules/unsafe/validating-check-constraint-on-existing-rows/#pgrubic.rules.unsafe.US013.ValidatingCheckConstraintOnExistingRows--when-should-you","title":"When should you?","text":"<p>If the table is empty. If the table is not empty but is not being concurrently accessed.</p>"},{"location":"rules/unsafe/validating-check-constraint-on-existing-rows/#pgrubic.rules.unsafe.US013.ValidatingCheckConstraintOnExistingRows--use-instead","title":"Use instead:","text":"<ol> <li>Add the check constraint without validation.</li> <li>Validate the constraint in a separate transaction.</li> </ol>"},{"location":"rules/unsafe/validating-foreign-key-constraint-on-existing-rows/","title":"validating-foreign-key-constraint-on-existing-rows (US012)","text":"<p>Automatic fix is available.</p>"},{"location":"rules/unsafe/validating-foreign-key-constraint-on-existing-rows/#pgrubic.rules.unsafe.US012.ValidatingForeignKeyConstraintOnExistingRows--what-it-does","title":"What it does","text":"<p>Checks validating foreign key constraint on existing rows.</p>"},{"location":"rules/unsafe/validating-foreign-key-constraint-on-existing-rows/#pgrubic.rules.unsafe.US012.ValidatingForeignKeyConstraintOnExistingRows--why-not","title":"Why not?","text":"<p>Adding a foreign key constraint to an already populated table will have to scan and validate that there are no violating records in the table, causing the table to be locked in which no other operations can be performed on the table for the duration of the validation. This will cause downtime if the table is concurrently being accessed by other clients.</p>"},{"location":"rules/unsafe/validating-foreign-key-constraint-on-existing-rows/#pgrubic.rules.unsafe.US012.ValidatingForeignKeyConstraintOnExistingRows--when-should-you","title":"When should you?","text":"<p>If the table is empty. If the table is not empty but is not being concurrently accessed.</p>"},{"location":"rules/unsafe/validating-foreign-key-constraint-on-existing-rows/#pgrubic.rules.unsafe.US012.ValidatingForeignKeyConstraintOnExistingRows--use-instead","title":"Use instead:","text":"<ol> <li>Add the foreign key constraint without validation.</li> <li>Validate the constraint in a separate transaction.</li> </ol>"}]}