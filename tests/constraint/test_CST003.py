"""Test identity generated by default."""

import pytest

from tests import TEST_FILE
from pgrubic import core
from pgrubic.rules.constraint.CT003 import IdentityGeneratedByDefault


@pytest.fixture(scope="module")
def identity_generated_by_default() -> core.BaseChecker:
    """Create an instance of IdentityGeneratedByDefault."""
    core.add_apply_fix_to_rule(IdentityGeneratedByDefault)
    core.add_set_locations_to_rule(IdentityGeneratedByDefault)
    return IdentityGeneratedByDefault()


@pytest.fixture
def lint_identity_generated_by_default(
    linter: core.Linter,
    identity_generated_by_default: core.BaseChecker,
) -> core.Linter:
    """Lint IdentityGeneratedByDefault."""
    identity_generated_by_default.config.lint.fix = False
    linter.checkers.add(identity_generated_by_default)

    return linter


def test_identity_generated_by_default_rule_code(
    identity_generated_by_default: core.BaseChecker,
) -> None:
    """Test identity generated by default rule code."""
    assert (
        identity_generated_by_default.code
        == identity_generated_by_default.__module__.split(".")[-1]
    )


def test_identity_generated_by_default_auto_fixable(
    identity_generated_by_default: core.BaseChecker,
) -> None:
    """Test identity generated by default auto fixable."""
    assert identity_generated_by_default.is_auto_fixable is True


def test_pass_create_table_identity_generated_always(
    lint_identity_generated_by_default: core.Linter,
) -> None:
    """Test fail identity generated by default."""
    sql_fail: str = """
    CREATE TABLE color (
        color_id INT GENERATED ALWAYS AS IDENTITY
    );
    """

    violations: core.ViolationMetric = lint_identity_generated_by_default.run(
        source_file=TEST_FILE,
        source_code=sql_fail,
    )

    assert violations == core.ViolationMetric(
        total=0,
        fixed_total=0,
        fixable_auto_total=0,
        fixable_manual_total=0,
    )


def test_pass_alter_table_identity_generated_always(
    lint_identity_generated_by_default: core.Linter,
) -> None:
    """Test fail identity generated by default."""
    sql_fail: str = """
    ALTER TABLE color
        ALTER COLUMN color_id ADD GENERATED ALWAYS AS IDENTITY
    ;
    """

    violations: core.ViolationMetric = lint_identity_generated_by_default.run(
        source_file=TEST_FILE,
        source_code=sql_fail,
    )

    assert violations == core.ViolationMetric(
        total=0,
        fixed_total=0,
        fixable_auto_total=0,
        fixable_manual_total=0,
    )


def test_fail_create_table_identity_generated_by_default(
    lint_identity_generated_by_default: core.Linter,
) -> None:
    """Test fail identity generated by default."""
    sql_fail: str = """
    CREATE TABLE color (
        color_id INT GENERATED BY DEFAULT AS IDENTITY
    );
    """

    violations: core.ViolationMetric = lint_identity_generated_by_default.run(
        source_file=TEST_FILE,
        source_code=sql_fail,
    )

    assert violations == core.ViolationMetric(
        total=1,
        fixed_total=0,
        fixable_auto_total=1,
        fixable_manual_total=0,
    )


def test_fail_alter_table_identity_generated_by_default(
    lint_identity_generated_by_default: core.Linter,
) -> None:
    """Test fail identity generated by default."""
    sql_fail: str = """
    ALTER TABLE color
        ALTER COLUMN color_id ADD GENERATED BY DEFAULT AS IDENTITY
    ;
    """

    violations: core.ViolationMetric = lint_identity_generated_by_default.run(
        source_file=TEST_FILE,
        source_code=sql_fail,
    )

    assert violations == core.ViolationMetric(
        total=1,
        fixed_total=0,
        fixable_auto_total=1,
        fixable_manual_total=0,
    )


def test_fail_identity_generated_by_default_description(
    lint_identity_generated_by_default: core.Linter,
    identity_generated_by_default: core.BaseChecker,
) -> None:
    """Test fail identity generated by default description."""
    sql_fail: str = """
    CREATE TABLE color (
        color_id INT GENERATED BY DEFAULT AS IDENTITY
    );
    """

    _: core.ViolationMetric = lint_identity_generated_by_default.run(
        source_file=TEST_FILE,
        source_code=sql_fail,
    )

    assert (
        next(iter(identity_generated_by_default.violations)).description
        == "Prefer generated always over generated by default identity"
    )


def test_pass_noqa_identity_generated_by_default(
    lint_identity_generated_by_default: core.Linter,
) -> None:
    """Test pass noqa identity generated by default."""
    sql_pass_noqa: str = """
    -- noqa: CT003
    CREATE TABLE color (
        color_id INT GENERATED BY DEFAULT AS IDENTITY
    );
    """

    violations: core.ViolationMetric = lint_identity_generated_by_default.run(
        source_file=TEST_FILE,
        source_code=sql_pass_noqa,
    )

    assert violations == core.ViolationMetric(
        total=0,
        fixed_total=0,
        fixable_auto_total=0,
        fixable_manual_total=0,
    )


def test_fail_noqa_identity_generated_by_default(
    lint_identity_generated_by_default: core.Linter,
) -> None:
    """Test fail noqa identity generated by default."""
    sql_noqa: str = """
    -- noqa: CST001
    CREATE TABLE color (
        color_id INT GENERATED BY DEFAULT AS IDENTITY
    );
    """

    violations: core.ViolationMetric = lint_identity_generated_by_default.run(
        source_file=TEST_FILE,
        source_code=sql_noqa,
    )

    assert violations == core.ViolationMetric(
        total=1,
        fixed_total=0,
        fixable_auto_total=1,
        fixable_manual_total=0,
    )


def test_pass_general_noqa_identity_generated_by_default(
    lint_identity_generated_by_default: core.Linter,
) -> None:
    """Test fail noqa identity generated by default."""
    sql_noqa: str = """
    -- noqa
    CREATE TABLE color (
        color_id INT GENERATED BY DEFAULT AS IDENTITY
    );
    """

    violations: core.ViolationMetric = lint_identity_generated_by_default.run(
        source_file=TEST_FILE,
        source_code=sql_noqa,
    )

    assert violations == core.ViolationMetric(
        total=0,
        fixed_total=0,
        fixable_auto_total=0,
        fixable_manual_total=0,
    )


def test_fail_fix_create_table_identity_generated_by_default(
    lint_identity_generated_by_default: core.Linter,
    identity_generated_by_default: core.BaseChecker,
) -> None:
    """Test fail fix create table identity generated by default."""
    sql_fail: str = """
    CREATE TABLE color (
        color_id INT GENERATED BY DEFAULT AS IDENTITY
    );
    """

    sql_fix: str = (
        "CREATE TABLE color (\n    color_id integer GENERATED ALWAYS AS IDENTITY \n);"
    )

    identity_generated_by_default.config.lint.fix = True

    violations: core.ViolationMetric = lint_identity_generated_by_default.run(
        source_file=TEST_FILE,
        source_code=sql_fail,
    )

    assert violations == core.ViolationMetric(
        total=1,
        fixed_total=1,
        fixable_auto_total=1,
        fixable_manual_total=0,
        fix=sql_fix,
    )


def test_fail_fix_alter_table_identity_generated_by_default(
    lint_identity_generated_by_default: core.Linter,
    identity_generated_by_default: core.BaseChecker,
) -> None:
    """Test fail fix alter table identity generated by default."""
    sql_fail: str = """
    ALTER TABLE color
        ALTER COLUMN color_id
            ADD GENERATED BY DEFAULT AS IDENTITY
    ;
    """

    sql_fix: str = (
        "ALTER TABLE color\n    ALTER COLUMN color_id ADD GENERATED ALWAYS AS IDENTITY ;"
    )

    identity_generated_by_default.config.lint.fix = True

    violations: core.ViolationMetric = lint_identity_generated_by_default.run(
        source_file=TEST_FILE,
        source_code=sql_fail,
    )

    assert violations == core.ViolationMetric(
        total=1,
        fixed_total=1,
        fixable_auto_total=1,
        fixable_manual_total=0,
        fix=sql_fix,
    )
