---
rule: NM011

test_fail_new_schema:
  sql_fail: |
    CREATE SCHEMA "schema";

test_fail_existing_schema:
  sql_fail: |
    ALTER SCHEMA tbl RENAME TO "schema";

test_fail_new_table:
  sql_fail: |
    CREATE TABLE "table" ();

test_fail_new_table_as_select:
  sql_fail: |
    CREATE TABLE "select" AS SELECT * FROM tbl;

test_fail_existing_table:
  sql_fail: |
    ALTER TABLE tbl RENAME TO "table";

test_fail_new_column_new_table:
  sql_fail: |
    CREATE TABLE tbl ("column" bigint);

test_fail_new_column_existing_table:
  sql_fail: |
    ALTER TABLE tbl ADD COLUMN "column" bigint;

test_fail_existing_column_existing_table:
  sql_fail: |
    ALTER TABLE tbl RENAME COLUMN tbl_id TO "column";

test_fail_new_view:
  sql_fail: |
    CREATE VIEW "view" AS SELECT * FROM tbl;

test_fail_existing_view:
  sql_fail: |
    ALTER VIEW tbl RENAME TO "view";

test_fail_new_materialized_view:
  sql_fail: |
    CREATE MATERIALIZED VIEW "view" AS SELECT * FROM tbl;

test_fail_existing_materialized_view:
  sql_fail: |
    ALTER MATERIALIZED VIEW tbl RENAME TO "view";

test_fail_new_index:
  sql_fail: |
    CREATE INDEX "index" ON tbl (tbl_id);

test_fail_existing_index:
  sql_fail: |
    ALTER INDEX tbl RENAME TO "index";

test_fail_new_constraint:
  sql_fail: |
    ALTER TABLE tbl ADD CONSTRAINT "constraint" PRIMARY KEY (tbl_id);

test_fail_existing_constraint:
  sql_fail: |
    ALTER TABLE tbl RENAME CONSTRAINT tbl_pkey TO "constraint";

test_fail_new_function:
  sql_fail: |
    CREATE FUNCTION "function"() RETURNS int AS 'SELECT 1' LANGUAGE SQL;

test_fail_existing_function:
  sql_fail: |
    ALTER FUNCTION tbl RENAME TO "function";

test_fail_new_procedure:
  sql_fail: |
    CREATE PROCEDURE "procedure" () AS 'SELECT 1' LANGUAGE SQL;

test_fail_existing_procedure:
  sql_fail: |
    ALTER PROCEDURE tbl RENAME TO "procedure";

test_fail_new_trigger:
  sql_fail: |
    CREATE TRIGGER "trigger"
        BEFORE INSERT ON tbl FOR EACH ROW EXECUTE PROCEDURE tbl_trigger();

test_fail_existing_trigger:
  sql_fail: |
    ALTER TRIGGER tbl_trig ON tbl RENAME TO "trigger";

test_fail_new_rule:
  sql_fail: |
    CREATE RULE "rule" AS
        ON UPDATE TO tbl
        DO ALSO NOTIFY tbl;

test_fail_existing_rule:
  sql_fail: |
    ALTER RULE notify_me ON tbl RENAME TO "rule";

test_fail_new_sequence:
  sql_fail: |
    CREATE SEQUENCE "sequence";

test_fail_existing_sequence:
  sql_fail: |
    ALTER SEQUENCE seq RENAME TO "sequence";

test_fail_new_database:
  sql_fail: |
    CREATE DATABASE "database";

test_fail_existing_database:
  sql_fail: |
    ALTER DATABASE tbl RENAME TO "database";

test_fail_new_role:
  sql_fail: |
    CREATE ROLE "role";

test_fail_existing_role:
  sql_fail: |
    ALTER ROLE tbl RENAME TO "role";

test_fail_new_tablespace:
  sql_fail: |
    CREATE TABLESPACE "tablespace" LOCATION 'directory_path';

test_fail_existing_tablespace:
  sql_fail: |
    ALTER TABLESPACE tbl RENAME TO "tablespace";

test_fail_new_enum:
  sql_fail: |
    CREATE TYPE "enum" AS ENUM ('a', 'b', 'c');

test_fail_existing_enum:
  sql_fail: |
    ALTER TYPE tbl RENAME TO "enum";

test_fail_new_composite_type:
  sql_fail: |
    CREATE TYPE "type" AS (
        a int,
        b text
    );

test_fail_existing_composite_type:
  sql_fail: |
    ALTER TYPE tbl RENAME TO "type";

test_fail_select_into:
  sql_fail: |
    SELECT * INTO "table" FROM tbl;

test_fail_space:
  sql_fail: |
    CREATE TABLE " table" ();

test_fail_upper:
  sql_fail: |
    CREATE TABLE "Table" ();

test_pass_new_schema:
  sql_pass: |
    CREATE SCHEMA _schema;

test_pass_existing_schema:
  sql_pass: |
    ALTER SCHEMA tbl RENAME TO _schema;

test_pass_new_table:
  sql_pass: |
    CREATE TABLE _table ();

test_pass_new_table_as_select:
  sql_pass: |
    CREATE TABLE _select AS SELECT * FROM tbl;

test_pass_existing_table:
  sql_pass: |
    ALTER TABLE tbl RENAME TO _table;

test_pass_new_column_new_table:
  sql_pass: |
    CREATE TABLE tbl (_column bigint);

test_pass_new_column_existing_table:
  sql_pass: |
    ALTER TABLE tbl ADD COLUMN _column bigint;

test_pass_existing_column_existing_table:
  sql_pass: |
    ALTER TABLE tbl RENAME COLUMN tbl_id TO _column;

test_pass_new_view:
  sql_pass: |
    CREATE VIEW _view AS SELECT * FROM tbl;

test_pass_existing_view:
  sql_pass: |
    ALTER VIEW tbl RENAME TO _view;

test_pass_new_materialized_view:
  sql_pass: |
    CREATE MATERIALIZED VIEW _view AS SELECT * FROM tbl;

test_pass_existing_materialized_view:
  sql_pass: |
    ALTER MATERIALIZED VIEW tbl RENAME TO _view;

test_pass_new_index:
  sql_pass: |
    CREATE INDEX _index ON tbl (tbl_id);

test_pass_existing_index:
  sql_pass: |
    ALTER INDEX tbl RENAME TO _index;

test_pass_new_constraint:
  sql_pass: |
    ALTER TABLE tbl ADD CONSTRAINT _constraint PRIMARY KEY (tbl_id);

test_pass_existing_constraint:
  sql_pass: |
    ALTER TABLE tbl RENAME CONSTRAINT tbl_pkey TO _constraint;

test_pass_new_function:
  sql_pass: |
    CREATE FUNCTION _function () RETURNS int AS 'SELECT 1' LANGUAGE SQL;

test_pass_existing_function:
  sql_pass: |
    ALTER FUNCTION tbl RENAME TO _function;

test_pass_new_procedure:
  sql_pass: |
    CREATE PROCEDURE _procedure () AS 'SELECT 1' LANGUAGE SQL;

test_pass_existing_procedure:
  sql_pass: |
    ALTER PROCEDURE tbl RENAME TO _procedure;

test_pass_new_trigger:
  sql_pass: |
    CREATE TRIGGER _trigger
        BEFORE INSERT ON tbl FOR EACH ROW EXECUTE PROCEDURE tbl_trigger();

test_pass_existing_trigger:
  sql_pass: |
    ALTER TRIGGER tbl_trig ON tbl RENAME TO _trigger;

test_pass_new_rule:
  sql_pass: |
    CREATE RULE _rule AS
        ON UPDATE TO tbl
        DO ALSO NOTIFY tbl;

test_pass_existing_rule:
  sql_pass: |
    ALTER RULE notify_me ON tbl RENAME TO _rule;

test_pass_new_sequence:
  sql_pass: |
    CREATE SEQUENCE _sequence;

test_pass_existing_sequence:
  sql_pass: |
    ALTER SEQUENCE seq RENAME TO _sequence;

test_pass_new_database:
  sql_pass: |
    CREATE DATABASE _database;

test_pass_existing_database:
  sql_pass: |
    ALTER DATABASE tbl RENAME TO _database;

test_pass_new_role:
  sql_pass: |
    CREATE ROLE _role;

test_pass_existing_role:
  sql_pass: |
    ALTER ROLE tbl RENAME TO _role;

test_pass_new_tablespace:
  sql_pass: |
    CREATE TABLESPACE _tablespace LOCATION 'directory_path';

test_pass_existing_tablespace:
  sql_pass: |
    ALTER TABLESPACE tbl RENAME TO _tablespace;

test_pass_new_enum:
  sql_pass: |
    CREATE TYPE _enum AS ENUM ('a', 'b', 'c');

test_pass_existing_enum:
  sql_pass: |
    ALTER TYPE tbl RENAME TO _enum;

test_pass_new_composite_type:
  sql_pass: |
    CREATE TYPE _type AS (
        a int,
        b text
    );

test_pass_existing_composite_type:
  sql_pass: |
    ALTER TYPE tbl RENAME TO _type;

test_pass_select_into:
  sql_pass: |
    SELECT * INTO _table FROM tbl;
