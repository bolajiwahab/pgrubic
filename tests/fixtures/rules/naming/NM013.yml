---
rule: NM013

test_fail_new_schema:
  sql_fail: |
    CREATE SCHEMA pg_tbl;

test_fail_existing_schema:
  sql_fail: |
    ALTER SCHEMA tbl RENAME TO pg_tbl;

test_fail_new_table:
  sql_fail: |
    CREATE TABLE pg_tbl ();

test_fail_new_table_as_select:
  sql_fail: |
    CREATE TABLE pg_tbl AS SELECT * FROM tbl;

test_fail_existing_table:
  sql_fail: |
    ALTER TABLE tbl RENAME TO pg_tbl;

test_fail_new_column_new_table:
  sql_fail: |
    CREATE TABLE tbl (pg_tbl_id bigint);

test_fail_new_column_existing_table:
  sql_fail: |
    ALTER TABLE tbl ADD COLUMN pg_tbl_id bigint;

test_fail_existing_column_existing_table:
  sql_fail: |
    ALTER TABLE tbl RENAME COLUMN tbl_id TO pg_tbl_id;

test_fail_new_view:
  sql_fail: |
    CREATE VIEW pg_tbl AS SELECT * FROM tbl;

test_fail_existing_view:
  sql_fail: |
    ALTER VIEW tbl RENAME TO pg_tbl;

test_fail_new_materialized_view:
  sql_fail: |
    CREATE MATERIALIZED VIEW pg_tbl AS SELECT * FROM tbl;

test_fail_existing_materialized_view:
  sql_fail: |
    ALTER MATERIALIZED VIEW tbl RENAME TO pg_tbl;

test_fail_new_index:
  sql_fail: |
    CREATE INDEX pg_tbl ON tbl (tbl_id);

test_fail_existing_index:
  sql_fail: |
    ALTER INDEX tbl RENAME TO pg_tbl;

test_fail_new_constraint:
  sql_fail: |
    ALTER TABLE tbl ADD CONSTRAINT pg_tbl PRIMARY KEY (tbl_id);

test_fail_existing_constraint:
  sql_fail: |
    ALTER TABLE tbl RENAME CONSTRAINT tbl_pkey TO pg_tbl;

test_fail_new_function:
  sql_fail: |
    CREATE FUNCTION pg_tbl() RETURNS int AS 'SELECT 1' LANGUAGE SQL;

test_fail_existing_function:
  sql_fail: |
    ALTER FUNCTION tbl RENAME TO pg_tbl;

test_fail_new_procedure:
  sql_fail: |
    CREATE PROCEDURE pg_tbl() AS 'SELECT 1' LANGUAGE SQL;

test_fail_existing_procedure:
  sql_fail: |
    ALTER PROCEDURE tbl RENAME TO pg_tbl;

test_fail_new_trigger:
  sql_fail: |
    CREATE TRIGGER pg_tbl_trig
    BEFORE INSERT ON tbl FOR EACH ROW EXECUTE PROCEDURE tbl_trigger();

test_fail_existing_trigger:
  sql_fail: |
    ALTER TRIGGER tbl_trig ON tbl RENAME TO pg_tbl_trig;

test_fail_new_rule:
  sql_fail: |
    CREATE RULE pg_notify_me AS
        ON UPDATE TO tbl
        DO ALSO NOTIFY tbl;

test_fail_existing_rule:
  sql_fail: |
    ALTER RULE notify_me ON tbl RENAME TO pg_notify_me;

test_fail_new_sequence:
  sql_fail: |
    CREATE SEQUENCE pg_seq;

test_fail_existing_sequence:
  sql_fail: |
    ALTER SEQUENCE seq RENAME TO pg_seq;

test_fail_new_database:
  sql_fail: |
    CREATE DATABASE pg_tbl;

test_fail_existing_database:
  sql_fail: |
    ALTER DATABASE tbl RENAME TO pg_tbl;

test_fail_new_role:
  sql_fail: |
    CREATE ROLE pg_tbl;

test_fail_existing_role:
  sql_fail: |
    ALTER ROLE tbl RENAME TO pg_tbl;

test_fail_new_tablespace:
  sql_fail: |
    CREATE TABLESPACE pg_tbl LOCATION 'directory_path';

test_fail_existing_tablespace:
  sql_fail: |
    ALTER TABLESPACE tbl RENAME TO pg_tbl;

test_fail_new_enum:
  sql_fail: |
    CREATE TYPE pg_tbl AS ENUM ('a', 'b', 'c');

test_fail_existing_enum:
  sql_fail: |
    ALTER TYPE tbl RENAME TO pg_tbl;

test_fail_new_composite_type:
  sql_fail: |
    CREATE TYPE pg_tbl AS (
        a int,
        b text
    );

test_fail_existing_composite_type:
  sql_fail: |
    ALTER TYPE tbl RENAME TO pg_tbl;

test_fail_select_into:
  sql_fail: |
    SELECT * INTO pg_tbl FROM tbl;

test_fail_space:
  sql_fail: |
    CREATE TABLE " pg_tbl" ();

test_pass_new_schema:
  sql_pass: |
    CREATE SCHEMA p_tbl;

test_pass_existing_schema:
  sql_pass: |
    ALTER SCHEMA tbl RENAME TO p_tbl;

test_pass_new_table:
  sql_pass: |
    CREATE TABLE p_tbl ();

test_pass_new_table_as_select:
  sql_pass: |
    CREATE TABLE p_tbl AS SELECT * FROM tbl;

test_pass_existing_table:
  sql_pass: |
    ALTER TABLE tbl RENAME TO p_tbl;

test_pass_new_column_new_table:
  sql_pass: |
    CREATE TABLE p_tbl (tbl_id bigint);

test_pass_new_column_existing_table:
  sql_pass: |
    ALTER TABLE tbl ADD COLUMN p_tbl_id bigint;

test_pass_existing_column_existing_table:
  sql_pass: |
    ALTER TABLE tbl RENAME COLUMN tbl_id TO p_tbl_id;

test_pass_new_view:
  sql_pass: |
    CREATE VIEW p_tbl AS SELECT * FROM tbl;

test_pass_existing_view:
  sql_pass: |
    ALTER VIEW tbl RENAME TO p_tbl;

test_pass_new_materialized_view:
  sql_pass: |
    CREATE MATERIALIZED VIEW p_tbl AS SELECT * FROM tbl;

test_pass_existing_materialized_view:
  sql_pass: |
    ALTER MATERIALIZED VIEW tbl RENAME TO p_tbl;

test_pass_new_index:
  sql_pass: |
    CREATE INDEX p_tbl ON tbl (tbl_id);

test_pass_existing_index:
  sql_pass: |
    ALTER INDEX tbl RENAME TO p_tbl;

test_pass_new_constraint:
  sql_pass: |
    ALTER TABLE tbl ADD CONSTRAINT p_tbl_pkey PRIMARY KEY (tbl_id);

test_pass_existing_constraint:
  sql_pass: |
    ALTER TABLE tbl RENAME CONSTRAINT tbl_pkey TO p_tbl_pkey;

test_pass_new_function:
  sql_pass: |
    CREATE FUNCTION p_tbl () RETURNS int AS 'SELECT 1' LANGUAGE SQL;

test_pass_existing_function:
  sql_pass: |
    ALTER FUNCTION tbl RENAME TO p_tbl;

test_pass_new_procedure:
  sql_pass: |
    CREATE PROCEDURE p_tbl () AS 'SELECT 1' LANGUAGE SQL;

test_pass_existing_procedure:
  sql_pass: |
    ALTER PROCEDURE tbl RENAME TO p_tbl;

test_pass_new_trigger:
  sql_pass: |
    CREATE TRIGGER p_tbl_trig
        BEFORE INSERT ON tbl FOR EACH ROW EXECUTE PROCEDURE tbl_trigger();

test_pass_existing_trigger:
  sql_pass: |
    ALTER TRIGGER tbl_trig ON tbl RENAME TO p_tbl_trig;

test_pass_new_rule:
  sql_pass: |
    CREATE RULE p_notify_me AS
        ON UPDATE TO tbl
        DO ALSO NOTIFY tbl;

test_pass_existing_rule:
  sql_pass: |
    ALTER RULE notify_me ON tbl RENAME TO p_notify_me;

test_pass_new_sequence:
  sql_pass: |
    CREATE SEQUENCE p_tbl;

test_pass_existing_sequence:
  sql_pass: |
    ALTER SEQUENCE seq RENAME TO p_tbl;

test_pass_new_database:
  sql_pass: |
    CREATE DATABASE p_tbl;

test_pass_existing_database:
  sql_pass: |
    ALTER DATABASE tbl RENAME TO p_tbl;

test_pass_new_role:
  sql_pass: |
    CREATE ROLE p_tbl;

test_pass_existing_role:
  sql_pass: |
    ALTER ROLE tbl RENAME TO p_tbl;

test_pass_new_tablespace:
  sql_pass: |
    CREATE TABLESPACE p_tbl LOCATION 'directory_path';

test_pass_existing_tablespace:
  sql_pass: |
    ALTER TABLESPACE tbl RENAME TO p_tbl;

test_pass_new_enum:
  sql_pass: |
    CREATE TYPE p_tbl AS ENUM ('a', 'b', 'c');

test_pass_existing_enum:
  sql_pass: |
    ALTER TYPE tbl RENAME TO p_tbl;

test_pass_new_composite_type:
  sql_pass: |
    CREATE TYPE p_tbl AS (
        a int,
        b text
    );

test_pass_existing_composite_type:
  sql_pass: |
    ALTER TYPE tbl RENAME TO p_tbl;

test_pass_select_into:
  sql_pass: |
    SELECT * INTO tbl FROM p_tbl;

test_pass_new_extension:
  sql_pass: |
    CREATE EXTENSION pg_tbl;
