---
rule: NM012

test_fail_new_schema:
  sql_fail: |
    CREATE SCHEMA tbl$;

test_fail_existing_schema:
  sql_fail: |
    ALTER SCHEMA tbl RENAME TO tbl$;

test_fail_new_table:
  sql_fail: |
    CREATE TABLE tbl$ ();

test_fail_new_table_as_select:
  sql_fail: |
    CREATE TABLE tbl$ AS SELECT * FROM tbl;

test_fail_existing_table:
  sql_fail: |
    ALTER TABLE tbl RENAME TO tbl$;

test_fail_new_column_new_table:
  sql_fail: |
    CREATE TABLE tbl (tbl_id$ bigint);

test_fail_new_column_existing_table:
  sql_fail: |
    ALTER TABLE tbl ADD COLUMN tbl_id$ bigint;

test_fail_existing_column_existing_table:
  sql_fail: |
    ALTER TABLE tbl RENAME COLUMN tbl_id TO tbl_id$;

test_fail_new_view:
  sql_fail: |
    CREATE VIEW tbl$ AS SELECT * FROM tbl;

test_fail_existing_view:
  sql_fail: |
    ALTER VIEW tbl RENAME TO tbl$;

test_fail_new_materialized_view:
  sql_fail: |
    CREATE MATERIALIZED VIEW tbl$ AS SELECT * FROM tbl;

test_fail_existing_materialized_view:
  sql_fail: |
    ALTER MATERIALIZED VIEW tbl RENAME TO tbl$;

test_fail_new_index:
  sql_fail: |
    CREATE INDEX tbl$ ON tbl (tbl_id);

test_fail_existing_index:
  sql_fail: |
    ALTER INDEX tbl RENAME TO tbl$;

test_fail_new_constraint:
  sql_fail: |
    ALTER TABLE tbl ADD CONSTRAINT tbl$ PRIMARY KEY (tbl_id);

test_fail_existing_constraint:
  sql_fail: |
    ALTER TABLE tbl RENAME CONSTRAINT tbl_pkey TO tbl$;

test_fail_new_function:
  sql_fail: |
    CREATE FUNCTION tbl$() RETURNS int AS 'SELECT 1' LANGUAGE SQL;

test_fail_existing_function:
  sql_fail: |
    ALTER FUNCTION tbl RENAME TO tbl$;

test_fail_new_procedure:
  sql_fail: |
    CREATE PROCEDURE tbl$() AS 'SELECT 1' LANGUAGE SQL;

test_fail_existing_procedure:
  sql_fail: |
    ALTER PROCEDURE tbl RENAME TO tbl$;

test_fail_new_trigger:
  sql_fail: |
    CREATE TRIGGER tbl_$trig
        BEFORE INSERT ON tbl FOR EACH ROW EXECUTE PROCEDURE tbl_trigger();

test_fail_existing_trigger:
  sql_fail: |
    ALTER TRIGGER tbl_trig ON tbl RENAME TO tbl_$trig;

test_fail_new_rule:
  sql_fail: |
    CREATE RULE notify$_me AS
        ON UPDATE TO tbl
        DO ALSO NOTIFY tbl;

test_fail_existing_rule:
  sql_fail: |
    ALTER RULE notify_me ON tbl RENAME TO notify$_me;

test_fail_new_sequence:
  sql_fail: |
    CREATE SEQUENCE se$q;

test_fail_existing_sequence:
  sql_fail: |
    ALTER SEQUENCE seq RENAME TO se$q;

test_fail_new_database:
  sql_fail: |
    CREATE DATABASE tbl$;

test_fail_existing_database:
  sql_fail: |
    ALTER DATABASE tbl RENAME TO tbl$;

test_fail_new_role:
  sql_fail: |
    CREATE ROLE tbl$;

test_fail_existing_role:
  sql_fail: |
    ALTER ROLE tbl RENAME TO tbl$;

test_fail_new_tablespace:
  sql_fail: |
    CREATE TABLESPACE tbl$ LOCATION 'directory_path';

test_fail_existing_tablespace:
  sql_fail: |
    ALTER TABLESPACE tbl RENAME TO tbl$;

test_fail_new_enum:
  sql_fail: |
    CREATE TYPE tbl$ AS ENUM ('a', 'b', 'c');

test_fail_existing_enum:
  sql_fail: |
    ALTER TYPE tbl RENAME TO tbl$;

test_fail_new_composite_type:
  sql_fail: |
    CREATE TYPE tbl$ AS (
        a int,
        b text
    );

test_fail_existing_composite_type:
  sql_fail: |
    ALTER TYPE tbl RENAME TO tbl$;

test_fail_select_into:
  sql_fail: |
    SELECT * INTO tbl$ FROM tbl;

test_fail_space:
  sql_fail: |
    CREATE TABLE " tbl$" ();

test_pass_new_schema:
  sql_pass: |
    CREATE SCHEMA _tbl;

test_pass_existing_schema:
  sql_pass: |
    ALTER SCHEMA tbl RENAME TO _tbl;

test_pass_new_table:
  sql_pass: |
    CREATE TABLE _tbl ();

test_pass_new_table_as_select:
  sql_pass: |
    CREATE TABLE _tbl AS SELECT * FROM tbl;

test_pass_existing_table:
  sql_pass: |
    ALTER TABLE tbl RENAME TO _tbl;

test_pass_new_column_new_table:
  sql_pass: |
    CREATE TABLE tbl (_tbl_id bigint);

test_pass_new_column_existing_table:
  sql_pass: |
    ALTER TABLE tbl ADD COLUMN _tbl_id bigint;

test_pass_existing_column_existing_table:
  sql_pass: |
    ALTER TABLE tbl RENAME COLUMN tbl_id TO _tbl_id;

test_pass_new_view:
  sql_pass: |
    CREATE VIEW _tbl AS SELECT * FROM tbl;

test_pass_existing_view:
  sql_pass: |
    ALTER VIEW tbl RENAME TO _tbl;

test_pass_new_materialized_view:
  sql_pass: |
    CREATE MATERIALIZED VIEW _tbl AS SELECT * FROM tbl;

test_pass_existing_materialized_view:
  sql_pass: |
    ALTER MATERIALIZED VIEW tbl RENAME TO _tbl;

test_pass_new_index:
  sql_pass: |
    CREATE INDEX _tbl ON tbl (tbl_id);

test_pass_existing_index:
  sql_pass: |
    ALTER INDEX tbl RENAME TO _tbl;

test_pass_new_constraint:
  sql_pass: |
    ALTER TABLE tbl ADD CONSTRAINT _tbl_pkey PRIMARY KEY (tbl_id);

test_pass_existing_constraint:
  sql_pass: |
    ALTER TABLE tbl RENAME CONSTRAINT tbl_pkey TO _tbl_pkey;

test_pass_new_function:
  sql_pass: |
    CREATE FUNCTION _tbl () RETURNS int AS 'SELECT 1' LANGUAGE SQL;

test_pass_existing_function:
  sql_pass: |
    ALTER FUNCTION tbl RENAME TO _tbl;

test_pass_new_procedure:
  sql_pass: |
    CREATE PROCEDURE _tbl () AS 'SELECT 1' LANGUAGE SQL;

test_pass_existing_procedure:
  sql_pass: |
    ALTER PROCEDURE tbl RENAME TO _tbl;

test_pass_new_trigger:
  sql_pass: |
    CREATE TRIGGER _tbl_trig
        BEFORE INSERT ON tbl FOR EACH ROW EXECUTE PROCEDURE tbl_trigger();

test_pass_existing_trigger:
  sql_pass: |
    ALTER TRIGGER tbl_trig ON tbl RENAME TO _tbl_trig;

test_pass_new_rule:
  sql_pass: |
    CREATE RULE _notify_me AS
        ON UPDATE TO tbl
        DO ALSO NOTIFY tbl;

test_pass_existing_rule:
  sql_pass: |
    ALTER RULE notify_me ON tbl RENAME TO _notify_me;

test_pass_new_sequence:
  sql_pass: |
    CREATE SEQUENCE _tbl;

test_pass_existing_sequence:
  sql_pass: |
    ALTER SEQUENCE seq RENAME TO _tbl;

test_pass_new_database:
  sql_pass: |
    CREATE DATABASE _tbl;

test_pass_existing_database:
  sql_pass: |
    ALTER DATABASE tbl RENAME TO _tbl;

test_pass_new_role:
  sql_pass: |
    CREATE ROLE _tbl;

test_pass_existing_role:
  sql_pass: |
    ALTER ROLE tbl RENAME TO _tbl;

test_pass_new_tablespace:
  sql_pass: |
    CREATE TABLESPACE _tbl LOCATION 'directory_path';

test_pass_existing_tablespace:
  sql_pass: |
    ALTER TABLESPACE tbl RENAME TO _tbl;

test_pass_new_enum:
  sql_pass: |
    CREATE TYPE _tbl AS ENUM ('a', 'b', 'c');

test_pass_existing_enum:
  sql_pass: |
    ALTER TYPE tbl RENAME TO _tbl;

test_pass_new_composite_type:
  sql_pass: |
    CREATE TYPE _tbl AS (
        a int,
        b text
    );

test_pass_existing_composite_type:
  sql_pass: |
    ALTER TYPE tbl RENAME TO _tbl;

test_pass_select_into:
  sql_pass: |
    SELECT * INTO tbl FROM _tbl;

test_pass_new_extension:
  sql_pass: |
    CREATE EXTENSION tbl$;
